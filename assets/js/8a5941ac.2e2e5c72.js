"use strict";(self.webpackChunkserenity_js_org=self.webpackChunkserenity_js_org||[]).push([[8317],{59792:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Why Serenity/JS","href":"/handbook/","docId":"index","unlisted":false},{"type":"category","label":"Getting started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Serenity/JS Project Templates","href":"/handbook/getting-started/project-templates","docId":"getting-started/project-templates","unlisted":false},{"type":"link","label":"Installing Serenity/JS","href":"/handbook/getting-started/installation","docId":"getting-started/installation","unlisted":false},{"type":"link","label":"Architecture","href":"/handbook/getting-started/architecture","docId":"getting-started/architecture","unlisted":false},{"type":"link","label":"Extending Playwright Test","href":"/handbook/getting-started/serenity-js-with-playwright-test","docId":"getting-started/serenity-js-with-playwright-test","unlisted":false},{"type":"link","label":"Extending Protractor","href":"/handbook/getting-started/serenity-js-with-protractor","docId":"getting-started/serenity-js-with-protractor","unlisted":false},{"type":"link","label":"Extending WebdriverIO","href":"/handbook/getting-started/serenity-js-with-webdriverio","docId":"getting-started/serenity-js-with-webdriverio","unlisted":false},{"type":"link","label":"Upgrading to Serenity/JS 3","href":"/handbook/getting-started/upgrading-to-serenity-js-3","docId":"getting-started/upgrading-to-serenity-js-3","unlisted":false}],"href":"/handbook/getting-started/"},{"type":"category","label":"Web testing","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Your first web scenario","href":"/handbook/web-testing/your-first-web-scenario","docId":"web-testing/your-first-web-scenario","unlisted":false},{"type":"link","label":"Page Element Query Language","href":"/handbook/web-testing/page-element-query-language","docId":"web-testing/page-element-query-language","unlisted":false},{"type":"link","label":"Lean Page Objects Pattern","href":"/handbook/web-testing/page-objects-pattern","docId":"web-testing/page-objects-pattern","unlisted":false},{"type":"link","label":"Serenity/JS web modules","href":"/handbook/web-testing/serenity-js-web-modules","docId":"web-testing/serenity-js-web-modules","unlisted":false}],"href":"/handbook/web-testing/"},{"type":"category","label":"API testing","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Your first API scenario","href":"/handbook/api-testing/your-first-api-scenario","docId":"api-testing/your-first-api-scenario","unlisted":false},{"type":"link","label":"Configuring the HTTP client","href":"/handbook/api-testing/configuring-http-client","docId":"api-testing/configuring-http-client","unlisted":false},{"type":"link","label":"Sending requests","href":"/handbook/api-testing/sending-requests","docId":"api-testing/sending-requests","unlisted":false},{"type":"link","label":"Verifying responses","href":"/handbook/api-testing/verifying-responses","docId":"api-testing/verifying-responses","unlisted":false},{"type":"link","label":"Blended Testing","href":"/handbook/api-testing/blended-testing","docId":"api-testing/blended-testing","unlisted":false}],"href":"/handbook/api-testing/"},{"type":"link","label":"Mobile testing","href":"/handbook/mobile-testing/","docId":"mobile-testing/index","unlisted":false},{"type":"category","label":"Core Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Screenplay Pattern","href":"/handbook/design/screenplay-pattern","docId":"design/screenplay-pattern","unlisted":false},{"type":"link","label":"Assertions and expectations","href":"/handbook/design/assertions","docId":"design/assertions","unlisted":false},{"type":"link","label":"Waiting and synchronisation","href":"/handbook/design/waiting-and-synchronisation","docId":"design/waiting-and-synchronisation","unlisted":false},{"type":"link","label":"Logging","href":"/handbook/design/logging","docId":"design/logging","unlisted":false},{"type":"link","label":"Debugging","href":"/handbook/design/debugging","docId":"design/debugging","unlisted":false},{"type":"link","label":"Control flow","href":"/handbook/design/control-flow","docId":"design/control-flow","unlisted":false},{"type":"link","label":"Data structures","href":"/handbook/design/data-structures","docId":"design/data-structures","unlisted":false},{"type":"link","label":"Portable test code","href":"/handbook/design/portable-test-code","docId":"design/portable-test-code","unlisted":false}],"href":"/handbook/design/"},{"type":"category","label":"Test Runners","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Cucumber","href":"/handbook/test-runners/cucumber","docId":"test-runners/cucumber","unlisted":false},{"type":"link","label":"Jasmine","href":"/handbook/test-runners/jasmine","docId":"test-runners/jasmine","unlisted":false},{"type":"link","label":"Mocha","href":"/handbook/test-runners/mocha","docId":"test-runners/mocha","unlisted":false},{"type":"link","label":"Playwright Test","href":"/handbook/test-runners/playwright-test","docId":"test-runners/playwright-test","unlisted":false},{"type":"link","label":"Protractor","href":"/handbook/test-runners/protractor","docId":"test-runners/protractor","unlisted":false},{"type":"link","label":"WebdriverIO","href":"/handbook/test-runners/webdriverio","docId":"test-runners/webdriverio","unlisted":false}],"href":"/handbook/test-runners/"},{"type":"category","label":"Reporting","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Domain Events","href":"/handbook/reporting/domain-events","docId":"reporting/domain-events","unlisted":false},{"type":"link","label":"Console Reporter","href":"/handbook/reporting/console-reporter","docId":"reporting/console-reporter","unlisted":false},{"type":"link","label":"Serenity BDD Reporter","href":"/handbook/reporting/serenity-bdd-reporter","docId":"reporting/serenity-bdd-reporter","unlisted":false},{"type":"link","label":"Photographer","href":"/handbook/reporting/photographer","docId":"reporting/photographer","unlisted":false},{"type":"link","label":"Artifact Archiver","href":"/handbook/reporting/artifact-archiver","docId":"reporting/artifact-archiver","unlisted":false},{"type":"link","label":"Stream Reporter","href":"/handbook/reporting/stream-reporter","docId":"reporting/stream-reporter","unlisted":false}],"href":"/handbook/reporting/"},{"type":"category","label":"Integration","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"GitHub Actions","href":"/handbook/integration/github-actions","docId":"integration/github-actions","unlisted":false},{"type":"link","label":"GitLab CI","href":"/handbook/integration/gitlab-ci","docId":"integration/gitlab-ci","unlisted":false},{"type":"link","label":"Jenkins CI","href":"/handbook/integration/jenkins-ci","docId":"integration/jenkins-ci","unlisted":false},{"type":"link","label":"JetBrains IDEA","href":"/handbook/integration/jetbrains-idea","docId":"integration/jetbrains-idea","unlisted":false},{"type":"link","label":"JIRA and other issue trackers","href":"/handbook/integration/jira-and-other-issue-trackers","docId":"integration/jira-and-other-issue-trackers","unlisted":false},{"type":"link","label":"Visual Studio Code","href":"/handbook/integration/visual-studio-code","docId":"integration/visual-studio-code","unlisted":false}],"href":"/handbook/integration/"}]},"docs":{"api-testing/blended-testing":{"id":"api-testing/blended-testing","title":"Blended Testing","description":"Blended Testing means making test scenarios interact with multiple interfaces of the system under test","sidebar":"docs"},"api-testing/configuring-http-client":{"id":"api-testing/configuring-http-client","title":"Configuring the HTTP client","description":"To interact with an HTTP-based API, your Serenity/JS actor","sidebar":"docs"},"api-testing/index":{"id":"api-testing/index","title":"API testing","description":"Serenity/JS REST is a Screenplay Pattern-compatible library that enables your actors to interact with REST- and other","sidebar":"docs"},"api-testing/sending-requests":{"id":"api-testing/sending-requests","title":"Sending requests","description":"To make a Serenity/JS actor send an HTTP request, you need to configure it with the ability to CallAnApi","sidebar":"docs"},"api-testing/verifying-responses":{"id":"api-testing/verifying-responses","title":"Verifying responses","description":"With Serenity/JS, you can verify responses to your API requests using LastResponse","sidebar":"docs"},"api-testing/your-first-api-scenario":{"id":"api-testing/your-first-api-scenario","title":"Your first API scenario","description":"Serenity/JS streamlines  designing and implementing test scenarios that interact with REST- and other HTTP-based APIs.","sidebar":"docs"},"design/assertions":{"id":"design/assertions","title":"Assertions and expectations","description":"Serenity/JS helps you model your test scenarios from the perspective of actors performing activities to accomplish their goals.","sidebar":"docs"},"design/control-flow":{"id":"design/control-flow","title":"Control flow","description":"Serenity/JS introduces idiomatic control flow constructs to support implementing conditional and repeated activities in your Screenplay Pattern scenarios.","sidebar":"docs"},"design/data-structures":{"id":"design/data-structures","title":"Data structures","description":"All the activities performed by Serenity/JS actors are asynchronous,","sidebar":"docs"},"design/debugging":{"id":"design/debugging","title":"Debugging","description":"Serenity/JS helps you model your test scenarios from the perspective of actors performing activities to accomplish their goals.","sidebar":"docs"},"design/index":{"id":"design/index","title":"Core Design Patterns","description":"In this part of the Serenity/JS Handbook you\'ll learn about the core design patterns that underpin the framework.","sidebar":"docs"},"design/logging":{"id":"design/logging","title":"Logging","description":"Serenity/JS helps you model your test scenarios from the perspective of actors performing activities to accomplish their goals.","sidebar":"docs"},"design/portable-test-code":{"id":"design/portable-test-code","title":"Portable test code","description":"Serenity/JS Screenplay Pattern APIs enable you to write simple test code that\'s portable across projects and teams,","sidebar":"docs"},"design/screenplay-pattern":{"id":"design/screenplay-pattern","title":"Screenplay Pattern","description":"The Screenplay Pattern is an innovative, user-centred approach","sidebar":"docs"},"design/waiting-and-synchronisation":{"id":"design/waiting-and-synchronisation","title":"Waiting and synchronisation","description":"Serenity/JS helps you model your test scenarios from the perspective of actors performing activities to accomplish their goals.","sidebar":"docs"},"getting-started/architecture":{"id":"getting-started/architecture","title":"Architecture","description":"Serenity/JS is a modular, full-stack acceptance testing framework based on Node.js.","sidebar":"docs"},"getting-started/index":{"id":"getting-started/index","title":"Getting started","description":"Serenity/JS is a full-stack acceptance testing framework. Its modular design enables you to create test scenarios","sidebar":"docs"},"getting-started/installation":{"id":"getting-started/installation","title":"Installing Serenity/JS","description":"In this article, you\'ll learn how to create a brand-new test automation project and install Serenity/JS from scratch.","sidebar":"docs"},"getting-started/project-templates":{"id":"getting-started/project-templates","title":"Serenity/JS Project Templates","description":"Serenity/JS Project Templates are boilerplate repositories that combine the most popular configurations","sidebar":"docs"},"getting-started/serenity-js-with-playwright-test":{"id":"getting-started/serenity-js-with-playwright-test","title":"Extending Playwright Test","description":"Serenity/JS offers excellent support for Playwright, including Playwright Test, UI Mode, trace viewer, and auto-waiting locators!","sidebar":"docs"},"getting-started/serenity-js-with-protractor":{"id":"getting-started/serenity-js-with-protractor","title":"Extending Protractor","description":"Serenity/JS offers excellent support for Protractor!","sidebar":"docs"},"getting-started/serenity-js-with-webdriverio":{"id":"getting-started/serenity-js-with-webdriverio","title":"Extending WebdriverIO","description":"Serenity/JS offers excellent support for WebdriverIO!","sidebar":"docs"},"getting-started/upgrading-to-serenity-js-3":{"id":"getting-started/upgrading-to-serenity-js-3","title":"Upgrading to Serenity/JS 3","description":"Serenity/JS 3.0 introduces a number of new features while aiming to retain backwards compatibility of most of the core APIs.","sidebar":"docs"},"index":{"id":"index","title":"Why Serenity/JS","description":"Serenity/JS is a free and open-source acceptance testing framework that can help you establish a clear link between","sidebar":"docs"},"integration/github-actions":{"id":"integration/github-actions","title":"GitHub Actions","description":"Serenity/JS integrates with industry-standard test runners, so that your test scenarios can be executed","sidebar":"docs"},"integration/gitlab-ci":{"id":"integration/gitlab-ci","title":"GitLab CI","description":"Serenity/JS integrates with industry-standard test runners, build tools, and CI/CD pipelines","sidebar":"docs"},"integration/index":{"id":"integration/index","title":"Integration","description":"Serenity/JS integrates with industry-standard test runners, so that your test scenarios can be executed","sidebar":"docs"},"integration/jenkins-ci":{"id":"integration/jenkins-ci","title":"Jenkins CI","description":"Serenity/JS integrates with industry-standard test runners, so that your test scenarios can be executed","sidebar":"docs"},"integration/jetbrains-idea":{"id":"integration/jetbrains-idea","title":"JetBrains IDEA","description":"Serenity/JS integrates with industry-standard test runners, so that your test scenarios can be executed","sidebar":"docs"},"integration/jira-and-other-issue-trackers":{"id":"integration/jira-and-other-issue-trackers","title":"JIRA and other issue trackers","description":"- Serenity BDD HTML reports can include links from scenarios to tickets in your issue tracker","sidebar":"docs"},"integration/visual-studio-code":{"id":"integration/visual-studio-code","title":"Visual Studio Code","description":"Visual Studio Code is a popular code editor that comes with built-in support for JavaScript, TypeScript, and Node.js.","sidebar":"docs"},"mobile-testing/index":{"id":"mobile-testing/index","title":"Mobile testing","description":"Serenity/JS integrates with WebdriverIO to enable mobile test automation using the Appium protocol.","sidebar":"docs"},"reporting/artifact-archiver":{"id":"reporting/artifact-archiver","title":"Artifact Archiver","description":"ArtifactArchiver, available as part of the @serenity-js/core module,","sidebar":"docs"},"reporting/console-reporter":{"id":"reporting/console-reporter","title":"Console Reporter","description":"ConsoleReporter, available as part of the @serenity-js/console-reporter module,","sidebar":"docs"},"reporting/domain-events":{"id":"reporting/domain-events","title":"Domain Events","description":"Serenity/JS domain events represent all the important things that happen during the execution of your test suite.","sidebar":"docs"},"reporting/index":{"id":"reporting/index","title":"Reporting","description":"Just like the core design patterns in your Serenity/JS scenarios revolve around the system metaphor","sidebar":"docs"},"reporting/photographer":{"id":"reporting/photographer","title":"Photographer","description":"Photographer, available as part of the @serenity-js/web module,","sidebar":"docs"},"reporting/serenity-bdd-reporter":{"id":"reporting/serenity-bdd-reporter","title":"Serenity BDD Reporter","description":"Serenity reports are a powerful feature enabled by Serenity BDD. They aim not only to report test results, but also to document how features are tested, and what your application does.","sidebar":"docs"},"reporting/stream-reporter":{"id":"reporting/stream-reporter","title":"Stream Reporter","description":"StreamReporter, available as part of the @serenity-js/core module,","sidebar":"docs"},"test-runners/cucumber":{"id":"test-runners/cucumber","title":"Cucumber","description":"Cucumber is a popular","sidebar":"docs"},"test-runners/index":{"id":"test-runners/index","title":"Test Runners","description":"Serenity/JS Test Runner Adapters are the main integration point between your test runner and Serenity/JS.","sidebar":"docs"},"test-runners/jasmine":{"id":"test-runners/jasmine","title":"Jasmine","description":"Jasmine is a universal test runner,","sidebar":"docs"},"test-runners/mocha":{"id":"test-runners/mocha","title":"Mocha","description":"Mocha.js is a universal test runner providing a number of useful features,","sidebar":"docs"},"test-runners/playwright-test":{"id":"test-runners/playwright-test","title":"Playwright Test","description":"Playwright Test is a test runner designed specifically to accommodate the needs","sidebar":"docs"},"test-runners/protractor":{"id":"test-runners/protractor","title":"Protractor","description":"Protractor is an end-to-end test framework for Angular and AngularJS applications, based on Selenium 3.","sidebar":"docs"},"test-runners/webdriverio":{"id":"test-runners/webdriverio","title":"WebdriverIO","description":"WebdriverIO is a progressive automation framework built to automate modern web and mobile applications.","sidebar":"docs"},"web-testing/index":{"id":"web-testing/index","title":"Web testing","description":"Serenity/JS web module is an abstraction layer on top of popular web integration tools like WebdriverIO, Playwright, or Protractor.","sidebar":"docs"},"web-testing/page-element-query-language":{"id":"web-testing/page-element-query-language","title":"Page Element Query Language","description":"Serenity/JS Page Element Query Language (PEQL) is a Screenplay Pattern-compatible abstraction layer","sidebar":"docs"},"web-testing/page-objects-pattern":{"id":"web-testing/page-objects-pattern","title":"Lean Page Objects Pattern","description":"While the Screenplay Pattern is a behavioural pattern,","sidebar":"docs"},"web-testing/serenity-js-web-modules":{"id":"web-testing/serenity-js-web-modules","title":"Serenity/JS web modules","description":"Serenity/JS offers an integration library-agnostic, unified abstraction layer on top of popular web integration libraries,","sidebar":"docs"},"web-testing/your-first-web-scenario":{"id":"web-testing/your-first-web-scenario","title":"Your first web scenario","description":"In this guide, you\'ll learn the basics of web testing with Serenity/JS; I\'ll show you how to run and debug existing tests","sidebar":"docs"}}}}')}}]);