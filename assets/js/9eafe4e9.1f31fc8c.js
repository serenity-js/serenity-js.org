"use strict";(self.webpackChunkserenity_js_org=self.webpackChunkserenity_js_org||[]).push([[749],{17129:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>i,toc:()=>a});var s=n(74848),r=n(28453);const i={},o=void 0,a=[{value:"Serenity/JS Playwright Test",id:"serenityjs-playwright-test",level:2},{value:"Installation",id:"installation",level:3},{value:"Serenity/JS Playwright Fixtures",id:"serenityjs-playwright-fixtures",level:3},{value:"Serenity/JS Screenplay Pattern Actors",id:"serenityjs-screenplay-pattern-actors",level:3},{value:"Single-actor scenarios",id:"single-actor-scenarios",level:4},{value:"Multi-actor scenarios",id:"multi-actor-scenarios",level:4},{value:"Customising Actors",id:"customising-actors",level:4},{value:"Customising test fixtures",id:"customising-test-fixtures",level:4},{value:"UI Component Testing",id:"ui-component-testing",level:3},{value:"Using Serenity/JS Screenplay Pattern Actors for Component Testing",id:"using-serenityjs-screenplay-pattern-actors-for-component-testing",level:4},{value:"Serenity Reports",id:"serenity-reports",level:3},{value:"Reference implementation",id:"reference-implementation",level:3},{value:"\ud83d\udce3 Stay up to date",id:"-stay-up-to-date",level:2},{value:"\ud83d\udc9b Support Serenity/JS",id:"-support-serenityjs",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.linkedin.com/company/serenity-js",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin",alt:"Follow Serenity/JS on LinkedIn"})}),"\n",(0,s.jsx)(t.a,{href:"https://www.youtube.com/@serenity-js",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube",alt:"Watch Serenity/JS on YouTube"})}),"\n",(0,s.jsx)(t.a,{href:"https://matrix.to/#/#serenity-js:gitter.im",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix",alt:"Join Serenity/JS Community Chat"})}),"\n",(0,s.jsx)(t.a,{href:"https://github.com/sponsors/serenity-js",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Support-@serenity--js-703EC8?logo=github",alt:"Support Serenity/JS on GitHub"})})]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://serenity-js.org",children:"Serenity/JS"})," is an innovative open-source framework designed to make acceptance and regression testing\nof complex software systems faster, more collaborative and easier to scale."]}),"\n",(0,s.jsx)(t.p,{children:"\u2b50\ufe0f Get started with Serenity/JS!"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://serenity-js.org/handbook/web-testing/your-first-web-scenario",children:"Serenity/JS web testing tutorial"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://serenity-js.org/handbook/test-runners/playwright-test/",children:"Serenity/JS + Playwright Test deep dive"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://serenity-js.org/handbook",children:"Serenity/JS Handbook"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/",children:"API documentation"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://serenity-js.org/handbook/project-templates/",children:"Serenity/JS Project Templates"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"\ud83d\udc4b Join the Serenity/JS Community!"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Meet other Serenity/JS developers and maintainers on the ",(0,s.jsx)(t.a,{href:"https://matrix.to/#/#serenity-js:gitter.im",children:"Serenity/JS Community chat channel"}),","]}),"\n",(0,s.jsxs)(t.li,{children:["Find answers to your Serenity/JS questions on the ",(0,s.jsx)(t.a,{href:"https://github.com/orgs/serenity-js/discussions/categories/how-do-i",children:"Serenity/JS Forum"}),","]}),"\n",(0,s.jsxs)(t.li,{children:["Learn how to ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/community/contributing/",children:"contribute to Serenity/JS"}),","]}),"\n",(0,s.jsxs)(t.li,{children:["Support the project and gain access to ",(0,s.jsx)(t.a,{href:"https://github.com/serenity-js/playbooks",children:"Serenity/JS Playbooks"})," by becoming a ",(0,s.jsx)(t.a,{href:"https://github.com/sponsors/serenity-js",children:"Serenity/JS GitHub Sponsor"}),"!"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"serenityjs-playwright-test",children:"Serenity/JS Playwright Test"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/playwright-test/",children:(0,s.jsx)(t.code,{children:"@serenity-js/playwright-test"})})," module offers a Serenity/JS reporter\nand fixtures that integrate ",(0,s.jsx)(t.a,{href:"https://playwright.dev/docs/intro",children:"Playwright Test"})," with Serenity/JS Screenplay Pattern APIs."]}),"\n",(0,s.jsxs)(t.p,{children:["Learn more about using ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/handbook/test-runners/playwright-test/",children:"Serenity/JS with Playwright Test"})]}),"\n",(0,s.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(t.p,{children:["To install this module, use an existing ",(0,s.jsx)(t.a,{href:"https://playwright.dev/docs/intro",children:"Playwright Test project"})," or generate a new one by running:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"npm init playwright@latest\n"})}),"\n",(0,s.jsx)(t.p,{children:"Install the below Serenity/JS modules in your Playwright Test project directory:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"npm install --save-dev @serenity-js/assertions @serenity-js/console-reporter @serenity-js/core @serenity-js/serenity-bdd @serenity-js/web @serenity-js/playwright @serenity-js/playwright-test\n"})}),"\n",(0,s.jsx)(t.h3,{id:"serenityjs-playwright-fixtures",children:"Serenity/JS Playwright Fixtures"}),"\n",(0,s.jsx)(t.p,{children:"To use Serenity/JS Screenplay Pattern APIs and benefit from the in-depth reporting capabilities,\nimport Serenity/JS test fixtures instead of the default ones:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-diff",children:"// example.spec.ts\n+ import { test } from '@serenity-js/playwright-test'\n- import { test } from '@playwright/test'\n\ntest.describe('Serenity Screenplay with Playwright', () => {\n    \n    test.describe('New Todo', () => {\n\n        test('should allow me to add todo items', async ({ page }) => {\n            //...\n        })\n    })\n})\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If you prefer, Serenity/JS also offers the more concise BDD-style ",(0,s.jsx)(t.code,{children:"describe/it"})," syntax:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// example.spec.ts\nimport { describe, it, test } from '@serenity-js/playwright-test'\n\ntest.use({\n    headless: true,\n})\n\ndescribe('Serenity Screenplay with Playwright', () => {\n    \n    describe('New Todo', () => {\n\n        it('should allow me to add todo items', async ({ page }) => {\n            //...\n        })\n    })\n})\n"})}),"\n",(0,s.jsx)(t.h3,{id:"serenityjs-screenplay-pattern-actors",children:"Serenity/JS Screenplay Pattern Actors"}),"\n",(0,s.jsxs)(t.p,{children:["Serenity/JS test fixtures simplify how you instantiate and use ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/core/class/Actor/",children:"Serenity/JS Screenplay Pattern Actors"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"single-actor-scenarios",children:"Single-actor scenarios"}),"\n",(0,s.jsxs)(t.p,{children:["If your tests need only a single actor, you can inject it using the ",(0,s.jsx)(t.code,{children:"actor"})," fixture.\nTo configure the name of your default actor, use the ",(0,s.jsx)(t.code,{children:"defaultActorName"})," configuration property:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// example.spec.ts\n\nimport { describe, it, test } from '@serenity-js/playwright-test'   // import fixtures\nimport { Navigate, Page } from '@serenity-js/playwright'            // import Screenplay Pattern web APIs\nimport { Ensure, equals } from '@serenity-js/assertions'            // import Screenplay Pattern assertion APIs                            \n\ntest.use({\n    headless: true,\n    defaultActorName: 'Serena'  // change default actor name\n})\n\ndescribe('Serenity Screenplay with Playwright', () => {\n    \n    describe('New Todo', () => {\n\n        // inject default actor:\n        it('should allow me to add todo items', async ({ actor }) => { \n            \n            // define test workflow\n            await actor.attemptsTo(                                                  \n                Navigate.to('https://todo-app.serenity-js.org/'),\n                Ensure.that(Page.current().title(), equals('Serenity/JS TodoApp')),\n            )\n        })\n    })\n})\n"})}),"\n",(0,s.jsx)(t.h4,{id:"multi-actor-scenarios",children:"Multi-actor scenarios"}),"\n",(0,s.jsxs)(t.p,{children:["For multi-actor scenarios where you need each actor to use a separate browser, use the ",(0,s.jsx)(t.code,{children:"actorCalled"})," fixture.\nYou can also use this pattern to override the default actor name on a per-scenario basis:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// example.spec.ts\n\nimport { describe, it, test } from '@serenity-js/playwright-test'   // import fixtures\n\ndescribe('Serenity Screenplay with Playwright', () => {\n    \n    describe('Chat app', () => {\n\n        it('should allow actors to send and receive messages', async ({ actorCalled }) => { \n\n            // define part of the workflow performed by the first actor:\n            await actorCalled('Alice').attemptsTo(                               \n                // navigate to a chat app\n                // post a message to Bob\n            )\n\n            // define parts of the workflow performed by the any other actors:\n            await actorCalled('Bob').attemptsTo(                                 \n                // navigate to a chat app\n                // post a reply to Alice\n            )\n\n            // Note that invoking actorCalled(name) multiple times\n            // while using the same name and within the scope of a single test\n            // returns the same actor, so you don't need to cache them:\n            await actorCalled('Alice').attemptsTo(                              \n                // check if the reply from Bob is received                      \n            )                                                                   \n        })\n    })\n})\n"})}),"\n",(0,s.jsx)(t.h4,{id:"customising-actors",children:"Customising Actors"}),"\n",(0,s.jsxs)(t.p,{children:["The default ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/core/class/Cast",children:"cast"})," of actors is limited to using a single ability\nto ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/playwright/class/BrowseTheWebWithPlaywright",children:(0,s.jsx)(t.code,{children:"BrowseTheWebWithPlaywright"})}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["If you'd like to give your actors additional abilities, like to ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/core/class/TakeNotes",children:(0,s.jsx)(t.code,{children:"TakeNotes"})}),",\n",(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/rest/class/CallAnApi",children:(0,s.jsx)(t.code,{children:"CallAnApi"})}),",\nor ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/local-server/class/ManageALocalServer",children:(0,s.jsx)(t.code,{children:"ManageALocalServer"})}),", you can install the relevant Serenity/JS module\nand configure them as follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// example.spec.ts\n\nimport { Cast, TakeNotes } from '@serenity-js/core'\nimport { test } from '@serenity-js/playwright-test'\nimport { BrowseTheWebWithPlaywright } from '@serenity-js/playwright'\nimport { CallAnApi } from '@serenity-js/rest'                            \n\ntest.use({\n    actors: async ({ browser, baseURL }, use) => {\n        await use(\n            Cast.where(actor => actor.whoCan(\n                BrowseTheWebWithPlaywright.using(browser),\n                TakeNotes.usingAnEmptyNotepad(),\n                CallAnApi.at(baseURL),\n            ))\n        )\n    },\n})\n"})}),"\n",(0,s.jsxs)(t.p,{children:["For scenarios where different actors need to be configured differently, you can also implement your own ",(0,s.jsx)(t.code,{children:"Cast"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// example.spec.ts\n\nimport { Cast } from '@serenity-js/core'\nimport { BrowseTheWebWithPlaywright, PlaywrightOptions } from '@serenity-js/playwright'\nimport { test } from '@serenity-js/playwright-test'\nimport { CallAnApi } from '@serenity-js/rest'\nimport { Browser } from 'playwright'\n\nclass Actors implements Cast {\n    constructor(\n        private readonly browser: Browser,\n        private readonly options: PlaywrightOptions,\n    ) {\n    }\n\n    prepare(actor: Actor) {\n        switch (actor.name) {\n            case 'James':\n                return actor.whoCan(BrowseTheWebWithPlaywright.using(this.browser, this.options))\n            default:\n                return actor.whoCan(CallAnApi.at(this.options.baseURL))\n        }\n    }\n}\n\ntest.use({\n    actors: async ({ browser, config }) => {\n        await use(new Actors(browser, {\n            defaultNavigationWaitUntil: 'domcontentloaded'\n        }))\n    }\n})\n"})}),"\n",(0,s.jsx)(t.h4,{id:"customising-test-fixtures",children:"Customising test fixtures"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/playwright-test/function/useFixtures/",children:(0,s.jsx)(t.code,{children:"useFixtures"})})," lets you configure\nSerenity/JS Screenplay Pattern actors in a single place,\nand define custom ",(0,s.jsx)(t.a,{href:"https://playwright.dev/docs/test-fixtures",children:"test fixtures"})," if needed."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// my-custom-api.ts\nexport const { \n    describe, it, test, beforeAll, beforeEach, afterEach, afterAll, expect\n} = useFixtures<{ email: string }>({\n    \n    // Override Serenity/JS fixtures:\n    actors: async ({ browser, baseURL }, use) => {\n        await use(\n            Cast.where(actor => actor.whoCan(\n                BrowseTheWebWithPlaywright.using(browser),\n                TakeNotes.usingAnEmptyNotepad(),\n                CallAnApi.at(baseURL),\n            ))\n        )\n    },\n    \n    // Add your own fixtures:\n    email: async ({ actor }, use) => {\n        await use(`${ actor.name }@example.org`);\n    },    \n})\n"})}),"\n",(0,s.jsx)(t.p,{children:"With the custom test API definition in place, use it in your test files instead of the default one:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// example.spec.ts\nimport { Log } from '@serenity-js/core'\n\nimport { describe, it, test } from './my-custom-api'    // Note the custom test API\n\ndescribe('Serenity Screenplay with Playwright', () => {\n\n    describe('New Todo', () => {\n\n        // inject default actor:\n        it('should allow me to add todo items', async ({ actor, email }) => {\n\n            // define test workflow\n            await actor.attemptsTo(\n                Log.the(email),\n            )\n        })\n    })\n})\n"})}),"\n",(0,s.jsx)(t.h3,{id:"ui-component-testing",children:"UI Component Testing"}),"\n",(0,s.jsxs)(t.p,{children:["You can use Serenity/JS and Playwright Test to write UI component tests and ",(0,s.jsx)(t.strong,{children:"reuse your test code"})," between component and end-to-end test suites."]}),"\n",(0,s.jsx)(t.p,{children:"To get started with component testing:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Follow the ",(0,s.jsx)(t.a,{href:"https://playwright.dev/docs/test-components",children:"Playwright Test Component Testing tutorial"})," to configure your component test suite,"]}),"\n",(0,s.jsx)(t.li,{children:"Use Serenity/JS test fixtures instead of the default ones."}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-diff",children:"// src/App.spec.tsx\n- import { test, expect } from '@playwright/experimental-ct-react'\n+ import { test as componentTest } from '@playwright/experimental-ct-react'\n+ import { useBase } from '@serenity-js/playwright-test'\n\n+ const { test, expect } = useBase(componentTest)\n\nimport App from './App'\n\ntest.use({ viewport: { width: 500, height: 500 } })\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<App />)\n  await expect(component).toContainText('Learn React')\n})\n"})}),"\n",(0,s.jsx)(t.h4,{id:"using-serenityjs-screenplay-pattern-actors-for-component-testing",children:"Using Serenity/JS Screenplay Pattern Actors for Component Testing"}),"\n",(0,s.jsxs)(t.p,{children:["Serenity/JS ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/playwright-test/function/useBase/",children:(0,s.jsx)(t.code,{children:"useBase(test)"})})," creates\na test API that gives you access to all the ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/playwright-test/interface/SerenityFixtures/",children:(0,s.jsx)(t.code,{children:"SerenityFixtures"})}),"\nyou could access in any other regular end-to-end test."]}),"\n",(0,s.jsxs)(t.p,{children:["This capability allows you to use ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/core/class/Actor/",children:"Serenity/JS Actors"})," and design\nand experiment with your ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/api/core/class/Task/",children:"Screenplay Pattern Tasks"}),"\nbefore incorporating them in your high-level acceptance and end-to-end tests."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"import { test as componentTest } from '@playwright/experimental-ct-react'\nimport { Ensure, contain } from '@serenity-js/assertions'\nimport { useBase } from '@serenity-js/playwright-test'\nimport { Enter, PageElement, CssClasses } from '@serenity-js/web'\n\nimport EmailInput from './EmailInput'\n\nconst { it, describe } = useBase(componentTest).useFixtures<{ emailAddress: string }>({\n    emailAddress: ({ actor }, use) => {\n        use(`${ actor.name }@example.org`)\n    }\n})\n\ndescribe('EmailInput', () => {\n\n    it('allows valid email addresses', async ({ actor, mount, emailAddress }) => {\n        const nativeComponent = await mount(<EmailInput/>)\n\n        const component = PageElement.from(nativeComponent)\n\n        await actor.attemptsTo(\n            Enter.theValue(emailAddress).into(component),\n            Ensure.that(CssClasses.of(component), contain('valid')),\n        )\n    })\n})\n"})}),"\n",(0,s.jsx)(t.h3,{id:"serenity-reports",children:"Serenity Reports"}),"\n",(0,s.jsxs)(t.p,{children:["To use Serenity/JS reporting capabilities, register the ",(0,s.jsx)(t.code,{children:"@serenity-js/playwright-test"})," reporter in your\n",(0,s.jsx)(t.code,{children:"playwright.config.ts"}),' and define the appropriate reporting services (a.k.a. your "stage crew").']}),"\n",(0,s.jsxs)(t.p,{children:["For example, to enable ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/handbook/reporting/console-reporter/",children:"Serenity/JS Console Reporter"}),"\nand ",(0,s.jsx)(t.a,{href:"https://serenity-js.org/handbook/reporting/serenity-bdd-reporter/",children:"Serenity BDD Reporter"}),", install the relevant modules:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm install --save-dev @serenity-js/console-reporter @serenity-js/serenity-bdd\n"})}),"\n",(0,s.jsx)(t.p,{children:"Next, configure your Playwright project as follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// playwright.conf.ts\n\nimport type { PlaywrightTestConfig } from '@playwright/test'\n\nconst config: PlaywrightTestConfig = {\n    testDir: './spec',\n    \n    reporter: [\n        [ '@serenity-js/playwright-test', {\n            crew: [\n                '@serenity-js/console-reporter',\n                [ '@serenity-js/serenity-bdd', { specDirectory: './spec' } ],\n                [ '@serenity-js/core:ArtifactArchiver', { outputDirectory: 'target/site/serenity' } ],\n                // '@serenity-js/core:StreamReporter',\n            ]\n        }],\n\n        // optional\n        [ 'html', { open: 'never' } ],          // built-in Playwright HTML reporter\n    ],\n\n    // Other configuration omitted for brevity\n    // For details, see https://playwright.dev/docs/test-configuration\n}\n\nexport default config\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Note that Serenity/JS reporters work well with the built-in ",(0,s.jsx)(t.a,{href:"https://playwright.dev/docs/test-reporters",children:"Playwright reporters"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"reference-implementation",children:"Reference implementation"}),"\n",(0,s.jsxs)(t.p,{children:["You can find a reference implementation demonstrating how to integrate Serenity/JS with Playwright Test in the ",(0,s.jsx)(t.a,{href:"https://github.com/serenity-js/serenity-js/tree/main/examples/playwright-test-todomvc",children:"Serenity/JS\nGitHub repository"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"-stay-up-to-date",children:"\ud83d\udce3 Stay up to date"}),"\n",(0,s.jsxs)(t.p,{children:["New features, tutorials, and demos are coming soon!\nFollow ",(0,s.jsx)(t.a,{href:"https://www.linkedin.com/company/serenity-js",children:"Serenity/JS on LinkedIn"}),",\nsubscribe to ",(0,s.jsx)(t.a,{href:"https://www.youtube.com/@serenity-js",children:"Serenity/JS channel on YouTube"})," and join the ",(0,s.jsx)(t.a,{href:"https://matrix.to/#/#serenity-js:gitter.im",children:"Serenity/JS Community Chat"})," to stay up to date!\nPlease also make sure to star \u2b50\ufe0f ",(0,s.jsx)(t.a,{href:"https://github.com/serenity-js/serenity-js",children:"Serenity/JS on GitHub"})," to help others discover the framework!"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.linkedin.com/company/serenity-js",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin",alt:"Follow Serenity/JS on LinkedIn"})}),"\n",(0,s.jsx)(t.a,{href:"https://www.youtube.com/@serenity-js",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube",alt:"Watch Serenity/JS on YouTube"})}),"\n",(0,s.jsx)(t.a,{href:"https://matrix.to/#/#serenity-js:gitter.im",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix",alt:"Join Serenity/JS Community Chat"})}),"\n",(0,s.jsx)(t.a,{href:"https://github.com/serenity-js/serenity-js",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/github/stars/serenity-js/serenity-js?label=Serenity%2FJS&logo=github&style=badge",alt:"GitHub stars"})})]}),"\n",(0,s.jsx)(t.h2,{id:"-support-serenityjs",children:"\ud83d\udc9b Support Serenity/JS"}),"\n",(0,s.jsx)(t.p,{children:"If you appreciate all the effort that goes into making sophisticated tools easy to work with, please support our work and become a Serenity/JS GitHub Sponsor today!"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/sponsors/serenity-js",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Support%20@serenity%2FJS-703EC8?style=for-the-badge&logo=github&logoColor=white",alt:"GitHub Sponsors"})})})]})}function c(e){void 0===e&&(e={});const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(96540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);