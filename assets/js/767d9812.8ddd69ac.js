"use strict";(self.webpackChunkserenity_js_org=self.webpackChunkserenity_js_org||[]).push([[7667],{15028:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=t(74848),i=t(28453);const a={sidebar_position:3},o="Waiting and synchronisation",r={id:"design/waiting-and-synchronisation",title:"Waiting and synchronisation",description:"Serenity/JS helps you model your test scenarios from the perspective of actors performing activities to accomplish their goals.",source:"@site/src/docs/handbook/design/waiting-and-synchronisation.mdx",sourceDirName:"design",slug:"/design/waiting-and-synchronisation",permalink:"/handbook/design/waiting-and-synchronisation",draft:!1,unlisted:!1,editUrl:"https://github.com/serenity-js/serenity-js.org/tree/main/src/docs/handbook/design/waiting-and-synchronisation.mdx",tags:[],version:"current",lastUpdatedAt:1729032457e3,sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Assertions and expectations",permalink:"/handbook/design/assertions"},next:{title:"Logging",permalink:"/handbook/design/logging"}},c={},l=[{value:"The anatomy of a synchronisation statement",id:"the-anatomy-of-a-synchronisation-statement",level:2},{value:"Wait vs Ensure",id:"wait-vs-ensure",level:2},{value:"Implementing custom expectations",id:"implementing-custom-expectations",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"waiting-and-synchronisation",children:"Waiting and synchronisation"}),"\n",(0,s.jsxs)(n.p,{children:["Serenity/JS helps you model your test scenarios from the perspective of ",(0,s.jsx)(n.a,{href:"/api/core/class/Actor",children:"actors"})," performing ",(0,s.jsx)(n.a,{href:"/api/core/class/Activity",children:"activities"})," to accomplish their goals.\nWaiting for a condition to occur follows this same consistent approach, with any synchronisation statements assertions expressed using the interaction to ",(0,s.jsx)(n.a,{href:"/api/core/class/Wait#until",children:(0,s.jsx)(n.code,{children:"Wait.until"})}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"the-anatomy-of-a-synchronisation-statement",children:"The anatomy of a synchronisation statement"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Wait.until"})," follows the same consistent pattern as ",(0,s.jsx)(n.a,{href:"/api/assertions/class/Ensure#eventually",children:(0,s.jsx)(n.code,{children:"Ensure.eventually"})})," and accepts two arguments:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["the ",(0,s.jsx)(n.a,{href:"http://xunitpatterns.com/ResultVerification.html",children:'"actual value"'})," - an ",(0,s.jsx)(n.a,{href:"/api/core#Answerable",children:(0,s.jsx)(n.code,{children:"Answerable"})})," to be evaluated in the context of the given ",(0,s.jsx)(n.a,{href:"/api/core/class/Actor",children:"actor"}),","]}),"\n",(0,s.jsxs)(n.li,{children:["an ",(0,s.jsx)(n.a,{href:"/api/core/class/Expectation",children:(0,s.jsx)(n.code,{children:"Expectation"})})," that defines the condition to be met by the actual value."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"An example Serenity/JS synchronisation statement might look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled, Wait } from '@serenity-js/core'\nimport { and, startsWith, endsWith } from '@serenity-js/assertions'\n\nawait actorCalled('Edna').attemptsTo(\n    Wait.until('Hello world', and(startsWith('Hello'), endsWith('world'))),\n    //   actual value --^      ^-- expectation\n)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"wait-vs-ensure",children:"Wait vs Ensure"}),"\n",(0,s.jsxs)(n.p,{children:["Same as the interaction to ",(0,s.jsx)(n.a,{href:"/handbook/design/assertions#fault-tolerant-assertions",children:(0,s.jsx)(n.code,{children:"Ensure.eventually"})}),",\n",(0,s.jsx)(n.code,{children:"Wait.until"}),' allows for the "actual value" to be ',(0,s.jsx)(n.a,{href:"/api/core/class/Question",children:(0,s.jsx)(n.strong,{children:"determined dynamically"})}),"\nand resolved in the context of the actor performing the assertion."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<span class="spinner">Loading...</span>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled, Wait } from '@serenity-js/core'\nimport { not, isPresent } from '@serenity-js/assertions'\nimport { PageElement, By } from '@serenity-js/web'\n\nconst spinner = () =>\n    PageElement.located(By.css('.spinner')).describedAs('spinner')\n\nawait actorCalled('Edna').attemptsTo(\n    Wait.until(spinner(), not(isPresent())),\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Again, same as the interaction to ",(0,s.jsx)(n.a,{href:"/handbook/design/assertions#fault-tolerant-assertions",children:(0,s.jsx)(n.code,{children:"Ensure.eventually"})}),",\nthe maximum ",(0,s.jsx)(n.a,{href:"/api/core/class/SerenityConfig#interactionTimeout",children:"interaction timeout"})," of ",(0,s.jsx)(n.code,{children:"Wait.until"}),"\ncan be set globally via ",(0,s.jsx)(n.a,{href:"/api/core/function/configure",children:"Serenity/JS configuration"}),",\nor per interaction:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled, Duration, Wait } from '@serenity-js/core'\nimport { not, isPresent } from '@serenity-js/assertions'\n\nawait actorCalled('Edna').attemptsTo(\n    Wait.upTo(Duration.ofSeconds(2))\n        .until(spinner(), not(isPresent())),\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["However, unlike ",(0,s.jsx)(n.code,{children:"Ensure.eventually"})," which uses an ",(0,s.jsx)(n.strong,{children:"exponential backoff"}),"\nalgorithm to reduce the frequency of evaluation calls over time, ",(0,s.jsx)(n.code,{children:"Wait.until"})," instructs the actor\nto resolve the actual value at a ",(0,s.jsx)(n.strong,{children:"consistent time interval"})," between the evaluation calls:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="Example web scenario interacting with the widget"',children:"import { actorCalled, Duration, Wait } from '@serenity-js/core'\nimport { not, isPresent } from '@serenity-js/assertions'\n\nawait actorCalled('Edna').attemptsTo(\n    Wait.until(spinner(), not(isPresent()))\n        .pollingEvery(Duration.ofSeconds(1)),\n)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"implementing-custom-expectations",children:"Implementing custom expectations"}),"\n",(0,s.jsxs)(n.p,{children:["Serenity/JS ",(0,s.jsx)(n.a,{href:"/api/assertions",children:"assertions"})," and ",(0,s.jsx)(n.a,{href:"/api/web",children:"web"})," modules provide expectations you'll need to implement\neven the most sophisticated test scenarios."]}),"\n",(0,s.jsxs)(n.p,{children:["However, you can also implement ",(0,s.jsx)(n.strong,{children:"custom expectations"})," when needed. To do that, consult the examples in ",(0,s.jsx)(n.a,{href:"/api/core/class/Expectation",children:(0,s.jsx)(n.code,{children:"Expectation"})})," API docs\nand the ",(0,s.jsx)(n.a,{href:"https://github.com/serenity-js/serenity-js",children:"Serenity/JS code base on GitHub"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(96540);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);