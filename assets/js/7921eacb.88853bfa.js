"use strict";(self.webpackChunkserenity_js_org=self.webpackChunkserenity_js_org||[]).push([[3877],{24733:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"web-testing/page-element-query-language","title":"Page Element Query Language","description":"Serenity/JS Page Element Query Language (PEQL) is a Screenplay Pattern-compatible abstraction layer","source":"@site/src/docs/handbook/web-testing/page-element-query-language.md","sourceDirName":"web-testing","slug":"/web-testing/page-element-query-language","permalink":"/handbook/web-testing/page-element-query-language","draft":false,"unlisted":false,"editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/docs/handbook/web-testing/page-element-query-language.md","tags":[],"version":"current","lastUpdatedAt":1749200220000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docs","previous":{"title":"Web Testing Patterns","permalink":"/handbook/web-testing/"},"next":{"title":"Lean Page Objects Pattern","permalink":"/handbook/web-testing/page-objects-pattern"}}');var i=t(74848),a=t(28453);const o={sidebar_position:2},r="Page Element Query Language",l={},c=[{value:"Working with individual page elements",id:"working-with-individual-page-elements",level:2},{value:"Identifying individual page elements",id:"identifying-individual-page-elements",level:3},{value:"Retrieving attributes of a page element",id:"retrieving-attributes-of-a-page-element",level:3},{value:"Using selector aliases",id:"using-selector-aliases",level:3},{value:"Using dynamic selectors",id:"using-dynamic-selectors",level:3},{value:"Transforming answers to questions",id:"transforming-answers-to-questions",level:3},{value:"Performing assertions",id:"performing-assertions",level:3},{value:"Waiting for conditions",id:"waiting-for-conditions",level:3},{value:"Just-in-time evaluation of questions",id:"just-in-time-evaluation-of-questions",level:3},{value:"Working with a collection of page elements",id:"working-with-a-collection-of-page-elements",level:2},{value:"Modelling a collection of page elements",id:"modelling-a-collection-of-page-elements",level:3},{value:"Retrieving an element from a collection",id:"retrieving-an-element-from-a-collection",level:3},{value:"Retrieving the text of multiple elements",id:"retrieving-the-text-of-multiple-elements",level:3},{value:"The trouble with duplicate selectors",id:"the-trouble-with-duplicate-selectors",level:4},{value:"Composing page elements using meta-questions",id:"composing-page-elements-using-meta-questions",level:3},{value:"Mapping page elements in a collection",id:"mapping-page-elements-in-a-collection",level:3},{value:"Creating custom meta-questions",id:"creating-custom-meta-questions",level:3},{value:"Querying page elements",id:"querying-page-elements",level:2},{value:"Filtering page elements",id:"filtering-page-elements",level:3},{value:"Finding a sibling element",id:"finding-a-sibling-element",level:3},{value:"Iterating over elements",id:"iterating-over-elements",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"page-element-query-language",children:"Page Element Query Language"})}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS ",(0,i.jsx)(n.strong,{children:"Page Element Query Language (PEQL)"})," is a ",(0,i.jsx)(n.a,{href:"/handbook/design/screenplay-pattern",children:"Screenplay Pattern"}),"-compatible ",(0,i.jsx)(n.strong,{children:"abstraction layer"}),"\noffering a ",(0,i.jsx)(n.strong,{children:"flexible"}),", ",(0,i.jsx)(n.strong,{children:"composable"}),", and ",(0,i.jsx)(n.strong,{children:"extensible"})," way to identify web elements in even the most complex web interfaces."]}),"\n",(0,i.jsxs)(n.p,{children:["PEQL is designed to help you create ",(0,i.jsx)(n.strong,{children:"portable web automation code"})," optimised for ",(0,i.jsx)(n.strong,{children:"ease of comprehension"}),", ",(0,i.jsx)(n.strong,{children:"reuse"}),",\nand ",(0,i.jsx)(n.strong,{children:"reducing test maintenance costs"})," across your organisation."]}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS Page Element Query Language uses ",(0,i.jsx)(n.strong,{children:"3 simple, composable abstractions"})," based on Screenplay ",(0,i.jsx)(n.a,{href:"/handbook/design/screenplay-pattern/#questions",children:"questions"}),"\nthat help you identify and interact with web elements of interest:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/api/web/class/PageElement",children:(0,i.jsx)(n.code,{children:"PageElement"})})})," - models a ",(0,i.jsx)(n.strong,{children:"single web element"}),","]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/api/web/class/PageElements",children:(0,i.jsx)(n.code,{children:"PageElements"})})})," - models a ",(0,i.jsx)(n.strong,{children:"collection of web elements"}),","]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/api/web/class/By",children:(0,i.jsx)(n.code,{children:"By"})})})," - represents ",(0,i.jsx)(n.strong,{children:"portable locators"})," used by your browser to identify web elements of interest."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In this section, you'll learn how to use them together to find the exact elements your tests need to interact with."}),"\n",(0,i.jsxs)(n.p,{children:["For information on how to debug PEQL expressions, see the ",(0,i.jsx)(n.a,{href:"/handbook/design/debugging/#inspecting-page-element-html",children:"debugging guide"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"working-with-individual-page-elements",children:"Working with individual page elements"}),"\n",(0,i.jsxs)(n.p,{children:["To show you how to work with ",(0,i.jsx)(n.strong,{children:"individual page elements"}),",\nI'll use an example shopping basket widget and demonstrate locating its various parts.\nThe widget is simple enough to help us focus on the important aspects of PEQL,\nyet sophisticated enough to be representative of other widgets you're likely to come across in the wild:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div id="basket">\n  <ul>\n    <li class="item">\n      <span class="name">apples</span>\n      <span class="price">\xa32.25</span>\n    </li>\n    <li class="item">\n      <span class="name">bananas</span>\n      <span class="price">\xa31.50</span>\n    </li>\n  </ul>\n  <div class="total">\xa33.75</div>\n</div>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"identifying-individual-page-elements",children:"Identifying individual page elements"}),"\n",(0,i.jsx)(n.p,{children:"One of the most common things to implement in a web-based test scenario is an interaction with a web element, like clicking on a button, entering a value into a form field, or asserting on some message\npresented to the end-user."}),"\n",(0,i.jsxs)(n.p,{children:["Of course, to interact with an element you need to tell your test how to find it.\nIn Serenity/JS, you can define an ",(0,i.jsx)(n.strong,{children:"individual page element"})," like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { By, PageElement } from '@serenity-js/web'\n\nexport const basketTotal = () =>                // <- Function representing a domain concept\n  PageElement.located(By.css('#basket .total')) // <- The way to locate the element, e.g. a CSS selector\n    .describedAs('basket total')                // <- Description for reporting purposes\n"})}),"\n",(0,i.jsx)(n.p,{children:"To define a page element:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions",children:"function"})," named after the ",(0,i.jsx)(n.strong,{children:"domain concept"})," represented by the UI widget, such as ",(0,i.jsx)(n.code,{children:"basketTotal"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Make the function return a ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElement#located",children:(0,i.jsx)(n.code,{children:"PageElement"})}),", configured to locate the element using one of the built-in ",(0,i.jsxs)(n.a,{href:"/api/web/class/By",children:[(0,i.jsx)(n.code,{children:"By"})," selectors"]}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Give your page element a ",(0,i.jsx)(n.strong,{children:"human-readable description"})," to be used when ",(0,i.jsx)(n.a,{href:"/handbook/reporting/",children:"reporting interactions"})," with the element."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Writing portable test code",type:"tip",children:(0,i.jsxs)(n.p,{children:["Note how giving your test functions ",(0,i.jsx)(n.strong,{children:"meaningful names"}),", such as ",(0,i.jsx)(n.code,{children:"basketTotal"}),", helps to make your code ",(0,i.jsx)(n.strong,{children:"easier to read"})," and ",(0,i.jsx)(n.strong,{children:"understand"}),". Also note how using the ",(0,i.jsx)(n.code,{children:"PageElement"})," and ",(0,i.jsx)(n.code,{children:"By"})," APIs\nhelps your code remain ",(0,i.jsx)(n.strong,{children:"declarative"}),", ",(0,i.jsx)(n.strong,{children:"portable"}),", and agnostic of low-level integration tool-specific method calls, further improving its ",(0,i.jsx)(n.strong,{children:"reusability"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"retrieving-attributes-of-a-page-element",children:"Retrieving attributes of a page element"}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS favours ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Function_composition_(computer_science)",children:"functional composition"}),"\nto help your code achieve polymorphic behaviour and promote code reuse.\nIn practice, this means that in order to retrieve a specific attribute of a ",(0,i.jsx)(n.code,{children:"PageElement"}),", you compose the element\nwith an ",(0,i.jsx)(n.a,{href:"/api/web",children:"appropriate web question"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, to retrieve the text value of a ",(0,i.jsx)(n.code,{children:"PageElement"})," returned by ",(0,i.jsx)(n.code,{children:"basketTotal()"}),", compose it with a question about its ",(0,i.jsx)(n.a,{href:"/api/web/class/Text",children:(0,i.jsx)(n.code,{children:"Text"})}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { By, PageElement, Text } from '@serenity-js/web'\n\nexport const basketTotal = () =>\n  PageElement.located(By.css('#basket .total'))\n    .describedAs('basket total')\n\nexport const basketTotalAmount = () =>\n  Text.of(basketTotal())                    // <- Compose PageElement with question about Text\n    .describedAs('basket total price')      // <- Custom description (optional) \n"})}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS ",(0,i.jsx)(n.a,{href:"/api/web",children:"web module"})," offers several web-specific questions you can compose with ",(0,i.jsx)(n.code,{children:"PageElement"}),", such as\n",(0,i.jsx)(n.a,{href:"/api/web/class/Attribute/",children:(0,i.jsx)(n.code,{children:"Attribute"})}),", ",(0,i.jsx)(n.a,{href:"/api/web/class/CssClasses/",children:(0,i.jsx)(n.code,{children:"CssClasses"})}),", ",(0,i.jsx)(n.a,{href:"/api/web/class/Value/",children:(0,i.jsx)(n.code,{children:"Value"})}),",\nand others."]}),"\n",(0,i.jsx)(n.h3,{id:"using-selector-aliases",children:"Using selector aliases"}),"\n",(0,i.jsxs)(n.p,{children:["In scenarios where elements use a consistent pattern allowing them to be easily identified,\nsuch as a ",(0,i.jsx)(n.code,{children:"data-testid"}),", or a ",(0,i.jsx)(n.code,{children:"role"})," attribute, you might want to implement custom selector aliases\nto avoid code duplication."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, below function ",(0,i.jsx)(n.code,{children:"byRole"})," helps to locate elements with\na desired ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles",children:"accessibility role"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { By, Click, PageElement } from '@serenity-js/web'\n\nconst byRole = (roleName: string) =>\n    By.css(`[role=\"${ roleName }\"]`)\n\nawait actorCalled('Alice').attemptsTo(\n    Click.on(PageElement.located(byRole('button'))),\n)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-dynamic-selectors",children:"Using dynamic selectors"}),"\n",(0,i.jsx)(n.p,{children:"In some scenarios, the exact value of the selector you need to use becomes known only at runtime.\nThis is typically the case when element attributes are calculated dynamically based on user actions."}),"\n",(0,i.jsxs)(n.p,{children:["To cater for that, all ",(0,i.jsxs)(n.a,{href:"/api/web/class/By",children:[(0,i.jsx)(n.code,{children:"By"})," selectors"]})," let you define\nselector value using an ",(0,i.jsx)(n.a,{href:"/api/core#Answerable",children:(0,i.jsx)(n.code,{children:"Answerable<string>"})}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Answerable, q } from '@serenity-js/core'\nimport { By, PageElement } from '@serenity-js/web'\n\nexport const byTestId = (dataTestId: Answerable<string>) =>\n    By.css(q`[data-testid=\"${ dataTestId }\"]`)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that the example above uses ",(0,i.jsxs)(n.a,{href:"/api/core/function/q",children:["tag function ",(0,i.jsx)(n.code,{children:"q"})]})," to concatenate a static string with an ",(0,i.jsx)(n.a,{href:"/api/core/#Answerable",children:(0,i.jsx)(n.code,{children:"Answerable<string>"})}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"transforming-answers-to-questions",children:"Transforming answers to questions"}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS questions offer not just a way to retrieve information, but also a powerful ",(0,i.jsx)(n.a,{href:"/api/core/#QuestionAdapter",children:"adapter mechanism"})," that gives you a consistent API to proxy the methods and fields of the underlying answer type,\nallowing you to transform the value before it's returned."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.code,{children:"Text.of(pageElement)"})," returns a ",(0,i.jsx)(n.code,{children:"QuestionAdapter<string>"}),", which proxies methods available on the ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",children:(0,i.jsx)(n.code,{children:"string"})})," type,\nsuch as ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim",children:(0,i.jsx)(n.code,{children:"trim"})})," or ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace",children:(0,i.jsx)(n.code,{children:"replace"})}),".\nAdditionally, ",(0,i.jsx)(n.a,{href:"/api/core/class/Question/#as",children:(0,i.jsx)(n.code,{children:"Question.as"})})," API offers a way to transform the answer to a question to another type."]}),"\n",(0,i.jsx)(n.p,{children:"Those two mechanisms combined give you a unique and flexible way to retrieve and transform information about the system under test and get it in the exact format you need."}),"\n",(0,i.jsxs)(n.p,{children:["For example, instead of retrieving the basket total amount as ",(0,i.jsx)(n.code,{children:"string"})," you might want to clean it up and transform into a ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",children:(0,i.jsx)(n.code,{children:"number"})}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { By, PageElement, Text } from '@serenity-js/web'\n\nexport const basketTotal = () =>\n  PageElement.located(By.css('#basket .total'))\n    .describedAs('basket total')\n\nexport const basketTotalAmount = () =>\n  Text.of(basketTotal())                // <- Compose PageElement with question about Text\n    .trim()                             // <-   Compose with a question that trims the result\n    .replace('\xa3', '')                   // <-   Compose with a question that removes the currency symbol\n    .as(Number)                         // <-   Compose with a question that converts the result to Number\n    .describedAs('basket total price')  // <- Custom description (optional)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performing-assertions",children:"Performing assertions"}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS web module provides ",(0,i.jsx)(n.a,{href:"/api/core/class/Expectation",children:"web-specific expectations"})," you use\nto verify if the actual state of the given element is what you expect it to be."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, you might want to ensure that a given element ",(0,i.jsx)(n.a,{href:"/api/web/function/isVisible",children:"is visible"}),", i.e. not obstructed by other elements:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { Ensure } from '@serenity-js/assertions'\nimport { isVisible } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n  Ensure.that(basketTotal(), isVisible()),\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also assert that a specific property of the element, like its ",(0,i.jsx)(n.a,{href:"/api/web/class/Text",children:"text"}),", has a certain value:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\n\nawait actorCalled('Alice').attemptsTo(\n  Ensure.that(Text.of(basketTotal()), equals('\xa33.75')),\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that Serenity/JS expectations are ",(0,i.jsx)(n.strong,{children:"type-safe"})," and ",(0,i.jsx)(n.strong,{children:"portable"}),".\nThis means that you're not limited to using just the web-specific expectations in your web tests,\nand you can use any other expectations from the ",(0,i.jsx)(n.a,{href:"/api/assertions",children:"Serenity/JS assertions module"}),"\nor even ",(0,i.jsx)(n.a,{href:"/api/core/class/Expectation",children:"write them yourself"}),"."]}),"\n",(0,i.jsx)(n.admonition,{title:"Learn more",type:"info",children:(0,i.jsxs)(n.p,{children:['Learn more about asserting on page elements in chapter "',(0,i.jsx)(n.a,{href:"/handbook/design/assertions#web-assertions",children:"Web assertions"}),'".']})}),"\n",(0,i.jsx)(n.h3,{id:"waiting-for-conditions",children:"Waiting for conditions"}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS web module provides ",(0,i.jsx)(n.a,{href:"/api/core/class/Expectation",children:"web-specific expectations"})," you use\nto synchronise your test code with the system under test and wait until its state meets your expectations."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, you might want for your test scenario to wait until a given element ",(0,i.jsx)(n.a,{href:"/api/assertions/function/isPresent/",children:"is present"})," in the DOM tree:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled, Duration, Wait } from '@serenity-js/core'\nimport { isPresent } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n  Wait.upTo(Duration.ofSeconds(2))\n    .until(basketTotal(), isPresent()),\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also wait for a specific property of the element, like its ",(0,i.jsx)(n.a,{href:"/api/web/class/Text",children:"text"}),", to have a certain value:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled, Wait } from '@serenity-js/core'\nimport { startsWith } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n  Wait.until(Text.of(basketTotal()), startsWith('\xa3')),\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that just like with performing the assertions, your web scenarios can use all the expectations from the ",(0,i.jsx)(n.a,{href:"/api/assertions",children:"Serenity/JS assertions module"}),"\nor you can ",(0,i.jsx)(n.a,{href:"/api/core/class/Expectation",children:"write some them yourself"}),"."]}),"\n",(0,i.jsx)(n.admonition,{title:"Learn more",type:"info",children:(0,i.jsxs)(n.p,{children:['Learn more about synchronising your web tests with the system under test in chapter "',(0,i.jsx)(n.a,{href:"/handbook/design/waiting-and-synchronisation",children:"Waiting and synchronisation"}),'".']})}),"\n",(0,i.jsx)(n.h3,{id:"just-in-time-evaluation-of-questions",children:"Just-in-time evaluation of questions"}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS questions, like the ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElement/",children:(0,i.jsx)(n.code,{children:"PageElement"})})," returned by calling ",(0,i.jsx)(n.code,{children:"basketTotal()"}),",\nor a chain of composed questions like ",(0,i.jsx)(n.code,{children:"Text.of(basketTotal()).trim().replace('\xa3', '').as(Number)"}),", represent a ",(0,i.jsx)(n.strong,{children:"mechanism for the actor to retrieve the value"}),", and ",(0,i.jsx)(n.strong,{children:"not the value itself"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["As such, questions are evaluated ",(0,i.jsx)(n.strong,{children:"just-in-time"})," and only when the actor needs to retrieve the underlying value."]}),"\n",(0,i.jsx)(n.p,{children:"For example, the text of the basket total is retrieved only when an actor performs an assertion:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\nexport const basketTotalAmount = () =>  //     \n  Text.of(basketTotal())                // <- A question describes a way for an actor\n    .describedAs('basket total price')  //    to retrieve some information\n\nawait actorCalled('Alice').attemptsTo(\n  Ensure.that(                          // <- A task like `Ensure` makes the actor \"answer\"\n    basketTotalAmount(),                //    the question and retrieve the value \n    equals('\xa33.75')\n  )\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This just-in-time evaluation mechanism also has another benefit.\nIt allows Serenity/JS questions to be used in tool- and interface-agnostic ",(0,i.jsx)(n.a,{href:"/handbook/design/waiting-and-synchronisation",children:"synchronisation tasks"}),",\nwhere it might take several attempts until the question returns the desired result:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled, Duration, Wait } from '@serenity-js/core'\nimport { equals } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n  Wait.until(basketTotalAmount(), equals('\xa33.75'))\n    .pollingEvery(Duration.ofMilliseconds(500))\n)\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Pro Tip",type:"info",children:(0,i.jsxs)(n.p,{children:["Note that the result of ",(0,i.jsx)(n.strong,{children:"composing questions"})," is also a ",(0,i.jsx)(n.strong,{children:"question"}),".\nThis design makes questions reusable and allows for them to be composed further, until they're finally resolved by an ",(0,i.jsx)(n.a,{href:"/handbook/design/screenplay-pattern",children:(0,i.jsx)(n.em,{children:"actor"})}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"working-with-a-collection-of-page-elements",children:"Working with a collection of page elements"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/api/web/class/PageElements",children:(0,i.jsx)(n.code,{children:"PageElements"})})," class is a ",(0,i.jsx)(n.a,{href:"/handbook/design/screenplay-pattern",children:"Screenplay Pattern"}),"-compatible\nabstraction that represents a collection of ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Element",children:"elements"})," in a web interface\nthat share some common characteristic."]}),"\n",(0,i.jsx)(n.p,{children:"To help you understand how to use this abstraction, remember the shopping basket widget I showed you earlier:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div id="basket">\n  <ul>\n    <li class="item">\n      <span class="name">apples</span>\n      <span class="price">\xa32.25</span>\n    </li>\n    <li class="item">\n      <span class="name">bananas</span>\n      <span class="price">\xa31.50</span>\n    </li>\n  </ul>\n  <div class="total">\xa33.75</div>\n</div>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"modelling-a-collection-of-page-elements",children:"Modelling a collection of page elements"}),"\n",(0,i.jsxs)(n.p,{children:["Similarly to how you model a ",(0,i.jsx)(n.a,{href:"/handbook/web-testing/page-element-query-language/#working-with-individual-page-elements",children:"single page element"}),",\nto model a ",(0,i.jsx)(n.strong,{children:"collection of page elements"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a function that captures the name of the concept they represent, like ",(0,i.jsx)(n.code,{children:"basketItems"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Make the function return a ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements/#located",children:"PageElements"})," object."]}),"\n",(0,i.jsx)(n.li,{children:"Define a custom description to be used for reporting purposes."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For example, you could represent the items displayed in the shopping basket as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { By, PageElements } from '@serenity-js/web'\n\nconst basketItems = () =>\n  PageElements.located(By.css('#basket .item')) // <- Note plural `PageElements` \n    .describedAs('basket items')                //    instead of `PageElement`\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that in the code sample above, the selector ",(0,i.jsx)(n.code,{children:"By.css('#basket .item')"})," makes the collection target ",(0,i.jsx)(n.strong,{children:"both"})," the ",(0,i.jsx)(n.code,{children:'<li class="item" />'})," elements,\neach of which contains two descendant elements: ",(0,i.jsx)(n.code,{children:'<span class="name" />'})," and ",(0,i.jsx)(n.code,{children:'<span class="price" />'})," ."]}),"\n",(0,i.jsxs)(n.p,{children:["In a moment, I'll show you ",(0,i.jsx)(n.a,{href:"/handbook/web-testing/page-element-query-language/#querying-page-elements",children:"how to make your queries more precise"}),"\nand retrieve only those elements you need."]}),"\n",(0,i.jsx)(n.h3,{id:"retrieving-an-element-from-a-collection",children:"Retrieving an element from a collection"}),"\n",(0,i.jsxs)(n.p,{children:["If you need to retrieve a specific element from a collection, and you know what position it occupies, you can use\n",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements#first",children:(0,i.jsx)(n.code,{children:"PageElements#first()"})}),",\n",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements#last",children:(0,i.jsx)(n.code,{children:"PageElements#last()"})}),",\nand ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements#nth",children:(0,i.jsx)(n.code,{children:"PageElements#nth(index)"})})," APIs:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { By, PageElements } from '@serenity-js/web'\n\nconst firstItem = () =>\n  PageElements.located(By.css('#basket .item'))\n    .first()\n\nconst secondItem = () =>\n  PageElements.located(By.css('#basket .item'))\n    .nth(1)                                         // <- Note the zero-based indexing\n\nconst lastItem = () =>\n  PageElements.located(By.css('#basket .item'))\n    .last()\n"})}),"\n",(0,i.jsx)(n.p,{children:"The above APIs are particularly useful when you need to retrieve elements from a sorted collection,\nsuch as the most recent comment under an article, the last customer order in a CRM system,\nnth position from a league table, and so on."}),"\n",(0,i.jsx)(n.h3,{id:"retrieving-the-text-of-multiple-elements",children:"Retrieving the text of multiple elements"}),"\n",(0,i.jsxs)(n.p,{children:["Similarly to ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElement",children:(0,i.jsx)(n.code,{children:"PageElement"})}),", ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements",children:(0,i.jsx)(n.code,{children:"PageElements"})})," can be composed with other questions,\nlike ",(0,i.jsx)(n.a,{href:"/api/web/class/Text",children:(0,i.jsx)(n.code,{children:"Text.ofAll"})}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { By, PageElements, Text } from '@serenity-js/web'\n\nconst basketItemNameElements = () =>\n  PageElements.located(By.css('#basket .item .name'))\n    .describedAs('basket item names')\n\nconst basketItemNameElementNames = () =>\n    Text.ofAll(basketItemNameElements())\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/api/web/class/Text",children:(0,i.jsx)(n.code,{children:"Text.ofAll"})})," API is useful when you need to retrieve text content of multiple elements and assert on it all at once:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { Text } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(Text.ofAll(basketItemNameElements()), equals([\n        'apples',\n        'bananas',\n    ]))\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"the-trouble-with-duplicate-selectors",children:"The trouble with duplicate selectors"}),"\n",(0,i.jsxs)(n.p,{children:["Note how in the last code sample we had to introduce a new function ",(0,i.jsx)(n.code,{children:"basketItemNameElements"}),",\nwhich is ",(0,i.jsx)(n.em,{children:"almost"})," the same as ",(0,i.jsx)(n.code,{children:"basketItems"})," you saw earlier.\nThe only real difference is that the new function makes the selector ",(0,i.jsx)(n.em,{children:"a bit"})," more precise\nand helps us to return just the item name, and not the price:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const basketItems = () =>\n  PageElements.located(By.css('#basket .item'))       // <- \n    .describedAs('basket items')                      //    Selectors are\n                                                      //    _almost_  \nconst basketItemNameElements = () =>                  //    identical\n  PageElements.located(By.css('#basket .item .name')) // <-\n    .describedAs('basket item names')\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To help you avoid duplicate selectors like the ones above, Serenity/JS page elements are designed to be ",(0,i.jsx)(n.strong,{children:"composable"})," and ",(0,i.jsx)(n.strong,{children:"reusable"}),'\nthrough a mechanism called "meta-questions", which I\'m about to show you next.']}),"\n",(0,i.jsxs)(n.admonition,{title:"duplicate selectors increase maintenance costs",type:"warning",children:[(0,i.jsxs)(n.p,{children:["Having multiple ",(0,i.jsx)(n.em,{children:"almost identical"})," but ",(0,i.jsx)(n.em,{children:"slightly different"})," selector definitions in the same test suite (or even the same test!)\nis typically tolerated by software delivery teams due to poor support for code reuse offered by most test automation tooling."]}),(0,i.jsxs)(n.p,{children:["However, this ",(0,i.jsx)(n.strong,{children:"duplication"})," also ",(0,i.jsx)(n.strong,{children:"leads to increased maintenance costs"}),".\nThat's because even a small change to the structure of the UI might require you\nto fix multiple selectors in your test automation code. Not to mention the issue gets worse the more complex selectors you use."]})]}),"\n",(0,i.jsx)(n.h3,{id:"composing-page-elements-using-meta-questions",children:"Composing page elements using meta-questions"}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS ",(0,i.jsx)(n.a,{href:"/api/core/interface/MetaQuestion",children:"meta-questions"}),' are "questions about questions",\nso questions that can be composed with other questions and answered in their context.\nIn short, any Serenity/JS question that has a ',(0,i.jsx)(n.a,{href:"/api/core/interface/MetaQuestion/#of",children:(0,i.jsx)(n.code,{children:"question.of(anotherQuestion)"})})," API is\na meta-question."]}),"\n",(0,i.jsxs)(n.p,{children:["Conveniently, ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElement/",children:(0,i.jsx)(n.code,{children:"PageElement"})})," is a meta-question that can be\ncomposed with another ",(0,i.jsx)(n.code,{children:"PageElement"})," using a declarative ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElement/#of",children:(0,i.jsx)(n.code,{children:"childElement.of(parentElement)"})})," API\nto dynamically model a descendant/ancestor (a.k.a. child/parent) relationship between the elements."]}),"\n",(0,i.jsxs)(n.p,{children:["To improve our code from the last example and avoid duplicating element selectors,\nwe can introduce functions called ",(0,i.jsx)(n.code,{children:"basketItem()"})," and ",(0,i.jsx)(n.code,{children:"itemName()"}),"\nand compose them together as ",(0,i.jsx)(n.code,{children:"itemName().of(basketItem())"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { By, PageElement } from '@serenity-js/web'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\nconst basketItem = () =>\n  PageElement.located(By.css('#basket .item')) // <- Note singular `PageElement` \n    .describedAs('basket item')\n\nconst itemName = () =>                         \n  PageElement.located(By.css('.name'))         // <- Locator targeting  \n    .describedAs('name')                       //    just the .name element\n\nawait actorCalled('Alice').attemptsTo(\n  Ensure.that(\n    Text.of(                                   // <- retrieve text of\n        itemName().of(basketItem())            //    composed page elements   \n    ),      \n    equals('apples')    \n  ),\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Just like ",(0,i.jsx)(n.code,{children:"PageElement"})," is a meta-question, ",(0,i.jsx)(n.code,{children:"PageElements"})," is a ",(0,i.jsx)(n.a,{href:"/api/core/class/MetaList",children:(0,i.jsx)(n.code,{children:"MetaList"})}),"\nthat can be composed with another ",(0,i.jsx)(n.code,{children:"PageElement"})," using a declarative ",(0,i.jsx)(n.a,{href:"/api/core/class/MetaList/#of",children:(0,i.jsx)(n.code,{children:"pageElements.of(pageElement)"})})," API\nto dynamically model a descendants/ancestor (a.k.a. child/parent) relationship between the elements and their relative root element."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { By, PageElement, Text } from '@serenity-js/web'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\nconst basketItem = () =>\n  PageElement.located(By.css('#basket .item')) // <- Note singular `PageElement` \n    .describedAs('basket item')\n\nconst itemNames = () =>                         \n  PageElements.located(By.css('.name'))        // <- Note plural `PageElements`  \n    .describedAs('name')\n\nawait actorCalled('Alice').attemptsTo(\n  Ensure.that(\n    Text.ofAll(                                // <- retrieve text of \n        itemNames().of(basketItem())           //    ALL the item names in one go   \n    ),      \n    equals([\n        'apples',\n        'bananas',\n    ])    \n  ),\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS lets you compose not just the page elements, but also their ",(0,i.jsx)(n.strong,{children:"descriptions"}),".\nIn our example, the description of ",(0,i.jsx)(n.code,{children:"Text.of(itemName().of(basketItem()))"})," will be ",(0,i.jsx)(n.strong,{children:"derived from individual descriptions"})," of\nquestions in the chain and reported as ",(0,i.jsx)(n.code,{children:"text of name of basket item"}),".\nOf course, you can set your own description if you prefer using ",(0,i.jsx)(n.code,{children:".describedAs()"}),", too."]}),"\n",(0,i.jsxs)(n.p,{children:["You might have also noticed that the ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElement/#of",children:(0,i.jsx)(n.code,{children:"childElement.of(parentElement)"})})," API\nworks only with ",(0,i.jsx)(n.strong,{children:"individual elements"}),".\nTo map ",(0,i.jsx)(n.strong,{children:"multiple elements"})," we need to use the ",(0,i.jsx)(n.code,{children:"PageElements"})," ",(0,i.jsx)(n.a,{href:"/handbook/web-testing/page-element-query-language/#mapping-page-elements-in-a-collection",children:"mapping API"}),", which we'll talk about next."]}),"\n",(0,i.jsxs)(n.admonition,{title:"Serenity/JS PEQL helps you avoid code duplication",type:"tip",children:[(0,i.jsxs)(n.p,{children:["Serenity/JS PEQL lets you ",(0,i.jsx)(n.strong,{children:"compose"})," and ",(0,i.jsx)(n.strong,{children:"reuse"})," page element definitions,\nhelping you to avoid code duplication and reduce maintenance costs."]}),(0,i.jsxs)(n.p,{children:["Using ",(0,i.jsx)(n.strong,{children:"meta questions"})," to enable page element reuse can be a great productivity boost,\nespecially when the system under test uses a consistent convention to name element identifiers and classes."]})]}),"\n",(0,i.jsx)(n.h3,{id:"mapping-page-elements-in-a-collection",children:"Mapping page elements in a collection"}),"\n",(0,i.jsxs)(n.p,{children:["Similarly to how you ",(0,i.jsx)(n.a,{href:"/handbook/web-testing/page-element-query-language/#transforming-answers-to-questions",children:"transform answers to individual questions"}),",\nyou can also transform each element in a collection\nusing the ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements#eachMappedTo",children:(0,i.jsx)(n.code,{children:"PageElements#eachMappedTo"})})," API\nand providing a ",(0,i.jsx)(n.a,{href:"/api/core/interface/MetaQuestion",children:"meta-question"})," to be used for the mapping."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, the same way you'd use the meta-question about ",(0,i.jsx)(n.a,{href:"/api/web/class/Text/",children:(0,i.jsx)(n.code,{children:"Text"})})," to retrieve the text\nvalue of an ",(0,i.jsx)(n.strong,{children:"individual page element"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { By, PageElement, Text } from '@serenity-js/web'\n\nconst basketItemName = () =>\n  PageElement.located(By.css('#basket .item .name')) \n    .describedAs('basket item name')\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(Text.of(basketItemName()), equals('apples'))\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"you could also use it to extract the text value of each element in a collection:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { By, PageElements, Text } from '@serenity-js/web'\n\nconst basketItemNames = () =>\n  PageElements.located(By.css('#basket .item .name')) \n    .describedAs('basket item name')\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(\n        basketItemNames().eachMappedTo(Text),\n        equals([ \n            'apples',\n            'bananas',\n        ])\n    )\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Where this pattern becomes indispensable is when you start ",(0,i.jsx)(n.strong,{children:"reusing"})," and ",(0,i.jsx)(n.strong,{children:"composing several meta-questions together"}),".\nFor example, you could map each of the ",(0,i.jsx)(n.code,{children:"basketItems()"})," to retrieve their name or price:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { By, PageElements, PageElement, Text } from '@serenity-js/web'\n\nconst basketItems = () =>\n  PageElements.located(By.css('#basket .item'))   // <- plural PageElements\n    .describedAs('basket items')\n\nconst itemName = () =>\n  PageElement.located(By.css('.name'))            // <- singular PageElement\n    .describedAs('name')\n\nconst itemPrice = () => \n  PageElement.located(By.css('.price'))           // <- singular PageElement\n   .describedAs('price')\n\nawait actorCalled('Alice').attemptsTo(\n  Ensure.that(\n    basketItems().eachMappedTo(Text.of(itemName())),\n    equals([ \n      'apples',\n      'bananas'\n    ])\n  ),\n  Ensure.that(\n    basketItems().eachMappedTo(Text.of(itemPrice())),\n    equals([\n      '\xa32.25',\n      '\xa31.50',\n    ])\n  )\n)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"creating-custom-meta-questions",children:"Creating custom meta-questions"}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS provides a number of meta-questions, like ",(0,i.jsx)(n.a,{href:"/api/web/class/Text",children:(0,i.jsx)(n.code,{children:"Text"})}),",\n",(0,i.jsx)(n.a,{href:"/api/web/class/CssClasses",children:(0,i.jsx)(n.code,{children:"CssClasses"})}),", or ",(0,i.jsx)(n.a,{href:"/api/web/class/Attribute",children:(0,i.jsx)(n.code,{children:"Attribute"})}),",\nand you can always write your own if needed."]}),"\n",(0,i.jsx)(n.p,{children:"For example, if you're dealing with a web interface that presents tabular data,\nyou might want to fetch a table row, perform some transformation on each cell,\nthen return the result as a JSON object so that it's easier to work with."}),"\n",(0,i.jsx)(n.p,{children:"An equivalent of doing that in our example would be to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"retrieve the name and price of each basket item,"}),"\n",(0,i.jsx)(n.li,{children:"clean up the data,"}),"\n",(0,i.jsx)(n.li,{children:"transform it into a JSON object,"}),"\n",(0,i.jsx)(n.li,{children:"assert on the results."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"You could implement the above as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"\nimport { actorCalled, MetaQuestion, Question } from '@serenity-js/core'\nimport { Ensure, equals } from '@serenity-js/assertions'\nimport { By, PageElements, PageElement, Text } from '@serenity-js/web'\n\nconst basketItems = () =>                           // Locate basket item container elements\n  PageElements.located(By.css('#basket .item'))\n    .describedAs('basket items')\n\nconst BasketItemDetails: MetaQuestion<PageElement, Question<Promise<{ name: string, price: number }>>> = {\n  \n  of: (element: PageElement) =>    // A meta-question must provide a method called `of`\n\n    Question.about('basket item details', async actor => {  // Create a question\n    \n       const name = Text                                  // Retrieve text of an element\n           .of(PageElement.located(By.css('.name')))      // located by CSS class .name\n           .of(element);                                  // within the container element\n  \n       const price = Text                                          // Retrieve text of an element\n           .of(PageElement.located(By.css('.price')).of(element))  // located by CSS class .price\n           .trim()                                                 // transform it to remove spaces\n           .replace('\xa3', '')                                       // remove the currency symbol\n           .as(Number);                                            // convert the result to Number\n  \n       return {\n           name:   await actor.answer(name),              // Instruct the actor to answer questions\n           price:  await actor.answer(price),             // and return result as JSON object\n       }\n    })\n}\n\nawait actorCalled('Alice').attemptsTo(\n  Ensure.that(\n    basketItems().eachMappedTo(BasketItemDetails),\n    equals([\n      { name: 'apples',  price: 2.25 },\n      { name: 'bananas', price: 1.50 },\n    ])\n  ),\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, when you want to create a question that returns a JSON object, instead of using ",(0,i.jsx)(n.a,{href:"/api/core/class/Question/#about",children:(0,i.jsx)(n.code,{children:"Question.about"})}),"\nyou can also use ",(0,i.jsx)(n.a,{href:"/api/core/class/Question/#fromObject",children:(0,i.jsx)(n.code,{children:"Question.fromObject"})}),", which will make your implementation\nmore concise:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const BasketItemDetails: MetaQuestion<PageElement, Question<Promise<{ name: string, price: number }>>> = {\n    of: (element: PageElement) =>\n      Question.fromObject({                             // Create a question that returns a JSON object\n  \n          name: Text                                        // Retrieve text of an element\n              .of(PageElement.located(By.css('.name')))     // located by CSS class .name\n              .of(element),                                 // within a container element\n  \n          price: Text                                                // Retrieve text of an element\n              .of(PageElement.located(By.css('.price')).of(element)) // located by CSS class .price\n              .trim()                                                // transform it to remove spaces\n              .replace('\xa3', '')                                      // remove the currency symbol\n              .as(Number)                                            // turn the result into Number\n  \n      }).describedAs('basket item details')             // Provide custom description\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"querying-page-elements",children:"Querying page elements"}),"\n",(0,i.jsxs)(n.p,{children:["While Serenity/JS ",(0,i.jsx)(n.a,{href:"/api/core/class/Expectation",children:"expectations"})," are most commonly used with ",(0,i.jsx)(n.a,{href:"#performing-assertions",children:"assertion"})," and ",(0,i.jsx)(n.a,{href:"#waiting-for-conditions",children:"synchronisation"})," statements,\nwhen used with the ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements#where",children:(0,i.jsx)(n.code,{children:"PageElements#where"})})," API they offer a great and reusable alternative to complex CSS selectors and XPath expressions."]}),"\n",(0,i.jsx)(n.p,{children:"In this section, I'll show you how to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"query page elements to find those that meet your expectations,"}),"\n",(0,i.jsx)(n.li,{children:"find an interactive element based on some property of its sibling,"}),"\n",(0,i.jsx)(n.li,{children:"iterate over selected elements to perform a common task."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In our examples, I'll be using a simple shopping list widget:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<ul id="shopping-list">\n    <li class="item buy">\n        <input type="checkbox" class="toggle">\n        <label>oats</label>\n        <button class="destroy">X</button>\n    </li>\n    <li class="item buy">\n        <input type="checkbox" class="toggle">\n        <label>coconut milk</label>\n        <button class="destroy">X</button>\n    </li>\n    <li class="item bought">\n        <input type="checkbox" class="toggle">\n        <label>coffee</label>\n        <button class="destroy">X</button>\n    </li>\n</ul>\n'})}),"\n",(0,i.jsx)(n.p,{children:"I'm also going to introduce a couple of helper questions using the patterns and APIs you're already familiar with\nfrom the earlier parts of this chapter:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { By, PageElement, PageElements } from '@serenity-js/web'\n\nconst shoppingList = () =>                              // Container element\n    PageElement.located(By.id('shopping-list'))\n        .describedAs('shopping list')\n\nconst shoppingListItems = () =>                         // Shopping list item \n    PageElements.located(By.css('.item'))               // widgets located within\n        .of(shoppingList())                             // the shopping list container\n        .describedAs('shopping list items')\n\nconst toggleButton = () =>                              // Toggle button\n    PageElement.located(By.css('.toggle'))\n        .describedAs('toggle')\n\nconst label = () =>                                     // Text of the item label\n    Text.of(PageElement.located(By.css('label')))\n        .describedAs('label')\n\nconst destroyButton = () =>                             // Destroy button\n    PageElement.located(By.css('.destroy'))\n        .describedAs('destroy button')\n"})}),"\n",(0,i.jsx)(n.h3,{id:"filtering-page-elements",children:"Filtering page elements"}),"\n",(0,i.jsxs)(n.p,{children:["Serenity/JS ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements/",children:(0,i.jsx)(n.code,{children:"PageElements"})})," are a ",(0,i.jsx)(n.a,{href:"/api/core/class/List/",children:(0,i.jsx)(n.code,{children:"List"})}),", which means they offer a filtering API\n(",(0,i.jsx)(n.a,{href:"/api/core/class/List/#where",children:(0,i.jsx)(n.code,{children:"list.where(metaQuestion, expectation)"})}),") and methods like\n",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements/#first",children:(0,i.jsx)(n.code,{children:"first()"})}),",\n",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements/#last",children:(0,i.jsx)(n.code,{children:"last()"})}),",\nor ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements/#count",children:(0,i.jsx)(n.code,{children:"count()"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You can use those APIs to find only those shopping list items that have ",(0,i.jsx)(n.code,{children:"buy"})," within their ",(0,i.jsx)(n.a,{href:"/api/web/class/CssClasses/",children:(0,i.jsx)(n.code,{children:"CssClasses"})}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { CssClasses } from '@serenity-js/web'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(\n        shoppingListItems()\n            .where(CssClasses, contain('buy'))\n            .count(),\n        equals(1)\n    )\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Furthermore, you can compose the result of your query with another question, like ",(0,i.jsx)(n.code,{children:"label().of(...)"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { CssClasses } from '@serenity-js/web'\nimport { Ensure, contain, equals } from '@serenity-js/assertions'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(\n        label().of(\n            shoppingListItems()\n                .where(CssClasses, contain('buy'))\n                .last(),\n        ),\n        equals('coconut milk')\n    )\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also combine several ",(0,i.jsx)(n.code,{children:".where"})," calls, adding multiple meta-questions to your filter chain:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { CssClasses } from '@serenity-js/web'\nimport { Ensure, contain, equals, includes } from '@serenity-js/assertions'\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(\n        label().of(\n            shoppingListItems()\n                .where(label(), includes('co'))     // 'coffee' and 'coconut milk'\n                .where(CssClasses, contain('buy'))  // 'coffee'\n                .first(),\n        ),\n        equals('coffee')\n    )\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also define a chain of filtering calls to ",(0,i.jsx)(n.strong,{children:"resolve it dynamically"}),"\nin the context of a root element at runtime, improving the reusability of your code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, equals, isPresent } from '@serenity-js/assertions'\n\nconst itemCalled = (name: string) =>\n    PageElements.located(By.css('.item'))\n        .where(label(), equals(name))\n        .first()\n        .describedAs(`item called ${ name }`)   // note how we DON'T have to specify the container element\n\nawait actorCalled('Alice').attemptsTo(\n    Ensure.that(\n        itemCalled('coffee')\n            .of(shoppingList()),                // container defined at runtime\n        isPresent(),\n    )\n)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"finding-a-sibling-element",children:"Finding a sibling element"}),"\n",(0,i.jsx)(n.p,{children:"To find a sibling element, e.g. to find a destroy button for an item whose label contains a certain text:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"find the container element whose descendant element meets your conditions,"}),"\n",(0,i.jsx)(n.li,{children:"locate the sibling element within that container element."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { CssClasses, Click } from '@serenity-js/web'\nimport { Ensure, contain, equals } from '@serenity-js/assertions'\n\nconst itemCalled = (name: string) =>\n    shoppingListItems()                 // Container element where label\n        .where(label(), equals(name))   // has certain text\n        .first()\n\nawait actorCalled('Alice').attemptsTo(\n    Click.on(\n        destroyButton()\n            .of(itemCalled('oats'))\n    ),\n)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"iterating-over-elements",children:"Iterating over elements"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/api/core/class/List/",children:(0,i.jsx)(n.code,{children:"List"})})," interface implemented by ",(0,i.jsx)(n.a,{href:"/api/web/class/PageElements/",children:(0,i.jsx)(n.code,{children:"PageElements"})})," lets you\nuse the ",(0,i.jsx)(n.a,{href:"/api/core/class/List#forEach",children:(0,i.jsx)(n.code,{children:"List#forEach"})})," API to\nperform a sequence of interactions with each element of the collection."]}),"\n",(0,i.jsx)(n.p,{children:"For example, to toggle every item that hasn't been bought yet:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"filter the list to find elements that meet the expectation,"}),"\n",(0,i.jsx)(n.li,{children:"iterate over the found elements to click on the toggle button of each element."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { CssClasses, Click } from '@serenity-js/web'\nimport { Ensure, contain, equals } from '@serenity-js/assertions'\n\nawait actorCalled('Alice').attemptsTo(\n    shoppingListItems()\n        .where(CssClasses, contain('buy'))\n        .forEach(({ item, actor }) =>               // Note both `item` and `actor`:\n            actor.attemptsTo(                       // `item` is the \"current\" element\n                Click.on(toggleButton().of(item)),  // in the loop, `actor` is a reference\n            )                                       // to the actor performing the task\n        )\n)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(96540);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);