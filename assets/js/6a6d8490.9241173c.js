"use strict";(self.webpackChunkserenity_js_org=self.webpackChunkserenity_js_org||[]).push([[8325],{91064:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"design/assertions","title":"Assertions and expectations","description":"Serenity/JS helps you model your test scenarios from the perspective of actors performing activities to accomplish their goals.","source":"@site/src/docs/handbook/design/assertions.mdx","sourceDirName":"design","slug":"/design/assertions","permalink":"/handbook/design/assertions","draft":false,"unlisted":false,"editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/docs/handbook/design/assertions.mdx","tags":[],"version":"current","lastUpdatedAt":1736608539000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docs","previous":{"title":"Screenplay Pattern","permalink":"/handbook/design/screenplay-pattern"},"next":{"title":"Waiting and synchronisation","permalink":"/handbook/design/waiting-and-synchronisation"}}');var i=n(74848),r=n(28453);const a={sidebar_position:2},o="Assertions and expectations",l={},c=[{value:"The anatomy of a Serenity/JS assertion",id:"the-anatomy-of-a-serenityjs-assertion",level:2},{value:"Reusable assertions",id:"reusable-assertions",level:2},{value:"Web assertions",id:"web-assertions",level:2},{value:"Fault-tolerant assertions",id:"fault-tolerant-assertions",level:2},{value:"Implementing custom expectations",id:"implementing-custom-expectations",level:2}];function h(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"assertions-and-expectations",children:"Assertions and expectations"})}),"\n",(0,i.jsxs)(s.p,{children:["Serenity/JS helps you model your test scenarios from the perspective of ",(0,i.jsx)(s.a,{href:"/api/core/class/Actor",children:"actors"})," performing ",(0,i.jsx)(s.a,{href:"/api/core/class/Activity",children:"activities"})," to accomplish their goals.\nAssertions follow this same consistent approach, with any assertions expressed using the interaction to ",(0,i.jsx)(s.a,{href:"/api/assertions/class/Ensure",children:(0,i.jsx)(s.code,{children:"Ensure"})}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["The interaction to ",(0,i.jsx)(s.a,{href:"/api/assertions/class/Ensure",children:(0,i.jsx)(s.code,{children:"Ensure"})})," has two flavours:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"/api/assertions/class/Ensure#that",children:(0,i.jsx)(s.code,{children:"Ensure.that"})}),", which makes the actor evaluate the expectation, and fails immediately if its condition is not met,"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"/api/assertions/class/Ensure#eventually",children:(0,i.jsx)(s.code,{children:"Ensure.eventually"})}),", which keeps evaluating the expectation until the condition is met, or the ",(0,i.jsx)(s.a,{href:"/api/core/class/SerenityConfig#interactionTimeout",children:"interaction timeout"})," expires."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"the-anatomy-of-a-serenityjs-assertion",children:"The anatomy of a Serenity/JS assertion"}),"\n",(0,i.jsxs)(s.p,{children:["Both ",(0,i.jsx)(s.code,{children:"Ensure.that"})," and ",(0,i.jsx)(s.code,{children:"Ensure.eventually"})," follow the same consistent pattern and accept two arguments:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["the ",(0,i.jsx)(s.a,{href:"http://xunitpatterns.com/ResultVerification.html",children:'"actual value"'})," - an ",(0,i.jsx)(s.a,{href:"/api/core#Answerable",children:(0,i.jsx)(s.code,{children:"Answerable"})})," to be evaluated in the context of the given ",(0,i.jsx)(s.a,{href:"/api/core/class/Actor",children:"actor"}),","]}),"\n",(0,i.jsxs)(s.li,{children:["an ",(0,i.jsx)(s.a,{href:"/api/core/class/Expectation",children:(0,i.jsx)(s.code,{children:"Expectation"})})," that defines the condition to be met by the actual value."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"An example Serenity/JS assertion might look like this:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { Ensure, and, startsWith, endsWith } from '@serenity-js/assertions'\n\nawait actorCalled('Edna').attemptsTo(\n    Ensure.that('Hello world', and(startsWith('Hello'), endsWith('world'))),\n    //   actual value --^      ^-- expectation\n)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Note that several Serenity/JS modules provide expectations you can use to define your assertions, most notably:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"/api/assertions",children:"Serenity/JS assertions module"})," provides general use expectations for any type of test automation"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"/api/web",children:"Serenity/JS web module"})," provides expectations dedicated to automating interactions with web interfaces"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"reusable-assertions",children:"Reusable assertions"}),"\n",(0,i.jsxs)(s.p,{children:['Unlike other assertion libraries, Serenity/JS allows for the "actual value" to be ',(0,i.jsx)(s.a,{href:"/api/core/class/Question",children:(0,i.jsx)(s.strong,{children:"determined dynamically"})}),"\nand resolved in the context of the actor performing the assertion.\nThis design enables ",(0,i.jsx)(s.strong,{children:"great flexibility"})," and helps to maximise ",(0,i.jsx)(s.strong,{children:"opportunities for code reuse"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["Consider a simple test scenario, verifying that an ",(0,i.jsx)(s.a,{href:"/api/rest",children:"interaction with a REST API"})," returns\nthe status code of ",(0,i.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200",children:"200 OK"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"import { actorCalled } from '@serenity-js/core'\nimport { CallAnApi, GetRequest, LastResponse, Send } from '@serenity-js/rest'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\nawait actorCalled('Apisit')\n    .whoCan(CallAnApi.at('https://serenity-js.org/'))\n    .attemptsTo(\n        Send.a(GetRequest.to('/handbook/design/assertions')),\n        Ensure.that(LastResponse.status(), equals(200)),\n    )\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Since the question about the ",(0,i.jsx)(s.a,{href:"/api/rest/class/LastResponse#status",children:(0,i.jsx)(s.code,{children:"LastResponse.status()"})})," is evaluated dynamically\nby the actor who performed the ",(0,i.jsx)(s.a,{href:"/api/rest/class/GetRequest",children:(0,i.jsx)(s.code,{children:"GetRequest"})}),",\nyou could create a custom ",(0,i.jsx)(s.a,{href:"/api/core/class/Task",children:"task"})," that encapsulates this operation:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"import { Answerable, d, Task } from '@serenity-js/rest'\nimport { Send, GetRequest, LastResponse } from '@serenity-js/rest'\nimport { Ensure, equals } from '@serenity-js/assertions'\n\nconst checkUrl = (url: Answerable<string>) =>\n    Task.where(d`#actor checks the ${ url }`,\n        Send.a(GetRequest.to(url)),\n        Ensure.that(LastResponse.status(), equals(200)),\n    )\n"})}),"\n",(0,i.jsx)(s.p,{children:"You could then use such custom task to create a simple link checker:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"import { actorCalled, List } from '@serenity-js/core'\nimport { CallAnApi } from '@serenity-js/rest'\n\nawait actorCalled('Apisit')\n    .whoCan(CallAnApi.at('https://serenity-js.org/'))\n    .attemptsTo(\n        checkUrl('/handbook/design/assertions'),\n    )\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Or even combine it with a ",(0,i.jsx)(s.a,{href:"/api/core/class/List",children:"List"}),"\nto check multiple URLs one after another:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"import { actorCalled, List } from '@serenity-js/core'\nimport { CallAnApi } from '@serenity-js/rest'\n\nawait actorCalled('Apisit')\n    .whoCan(CallAnApi.at('https://serenity-js.org/'))\n    .attemptsTo(\n        List.of([\n            '/handbook/design/assertions',\n            '/handbook/design/screenplay-pattern'\n        ]).\n        forEach(({ actor, item }) =>\n            actor.attemptsTo(\n                checkUrl(item),\n            ))\n    )\n"})}),"\n",(0,i.jsx)(s.h2,{id:"web-assertions",children:"Web assertions"}),"\n",(0,i.jsxs)(s.p,{children:["Interactions to ",(0,i.jsx)(s.a,{href:"/api/assertions/class/Ensure#that",children:(0,i.jsx)(s.code,{children:"Ensure.that"})})," and ",(0,i.jsx)(s.a,{href:"/api/assertions/class/Ensure#eventually",children:(0,i.jsx)(s.code,{children:"Ensure.eventually"})}),"\nare interface-agnostic, so you can use them to verify interactions with ",(0,i.jsx)(s.a,{href:"/handbook/api-testing/",children:"REST APIs"}),", ",(0,i.jsx)(s.a,{href:"/handbook/mobile-testing/",children:"mobile apps"}),", ",(0,i.jsx)(s.a,{href:"/handbook/web-testing/",children:"web UIs"}),", and so on."]}),"\n",(0,i.jsx)(s.p,{children:"Consider the following example web widget:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-html",children:'<h1 class="heading">Hello Serenity!</h1>\n'})}),"\n",(0,i.jsxs)(s.p,{children:["To interact with such widget, you'd define a ",(0,i.jsx)(s.a,{href:"/api/web/class/PageElement",children:(0,i.jsx)(s.code,{children:"PageElement"})})," describing how to locate it:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"import { PageElement, By } from '@serenity-js/web'\n\nconst heading = () =>\n    PageElement.located(By.css('.heading'))\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Since ",(0,i.jsx)(s.code,{children:"PageElement"})," is an implementation of the standard Serenity/JS ",(0,i.jsx)(s.a,{href:"/api/core/class/Question",children:(0,i.jsx)(s.code,{children:"Question"})})," interface,\nit is accepted by the interaction to ",(0,i.jsx)(s.code,{children:"Ensure"})," just like any other ",(0,i.jsx)(s.a,{href:"/api/core#Answerable",children:(0,i.jsx)(s.code,{children:"Answerable"})})," value:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",metastring:'title="Example web scenario interacting with the widget"',children:"import { actorCalled } from '@serenity-js/core'\nimport { Ensure } from '@serenity-js/assertions'\nimport { isVisible } from '@serenity-js/web'\n\nawait actorCalled('Edna').attemptsTo(\n    Ensure.that(heading(), isVisible()),\n)\n"})}),"\n",(0,i.jsx)(s.h2,{id:"fault-tolerant-assertions",children:"Fault-tolerant assertions"}),"\n",(0,i.jsxs)(s.p,{children:["What makes web testing challenging is having to deal with ",(0,i.jsx)(s.strong,{children:"unpredictable delays"})," typically caused by ",(0,i.jsx)(s.strong,{children:"network traffic"}),"\nor ",(0,i.jsx)(s.strong,{children:"complex animations"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["To help you work around that, Serenity/JS offers an interaction to ",(0,i.jsx)(s.a,{href:"/api/assertions/class/Ensure#eventually",children:(0,i.jsx)(s.code,{children:"Ensure.eventually"})}),",\nwhich instead of failing the scenario immediately when the expectation is not met, instructs the actor\nto evaluate the actual value until it meets the expectation, or the ",(0,i.jsx)(s.a,{href:"/api/core/class/SerenityConfig#interactionTimeout",children:"interaction timeout"})," expires."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",metastring:'title="Example web scenario interacting with the widget"',children:"import { actorCalled } from '@serenity-js/core'\nimport { Ensure } from '@serenity-js/assertions'\nimport { isVisible } from '@serenity-js/web'\n\nawait actorCalled('Edna').attemptsTo(\n    Ensure.eventually(heading(), isVisible()),\n)\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Note that while you can set the global\n",(0,i.jsx)(s.a,{href:"/api/core/class/SerenityConfig#interactionTimeout",children:"interaction timeout"}),"\nin Serenity/JS configuration, you can also configure it for the specific assertion:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",metastring:'title="Example web scenario interacting with the widget"',children:"import { actorCalled, Duration } from '@serenity-js/core'\nimport { Ensure } from '@serenity-js/assertions'\nimport { isVisible } from '@serenity-js/web'\n\nawait actorCalled('Edna').attemptsTo(\n    Ensure.eventually(heading(), isVisible())\n        .timeoutAfter(Duration.ofMilliseconds(500)),\n)\n"})}),"\n",(0,i.jsx)(s.h2,{id:"implementing-custom-expectations",children:"Implementing custom expectations"}),"\n",(0,i.jsxs)(s.p,{children:["Serenity/JS ",(0,i.jsx)(s.a,{href:"/api/assertions",children:"assertions"})," and ",(0,i.jsx)(s.a,{href:"/api/web",children:"web"})," modules provide expectations you'll need to implement\neven the most sophisticated test scenarios."]}),"\n",(0,i.jsxs)(s.p,{children:["However, you can also implement ",(0,i.jsx)(s.strong,{children:"custom expectations"})," when needed. To do that, consult the examples in ",(0,i.jsx)(s.a,{href:"/api/core/class/Expectation",children:(0,i.jsx)(s.code,{children:"Expectation"})})," API docs\nand the ",(0,i.jsx)(s.a,{href:"https://github.com/serenity-js/serenity-js",children:"Serenity/JS code base on GitHub"}),"."]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var t=n(96540);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);