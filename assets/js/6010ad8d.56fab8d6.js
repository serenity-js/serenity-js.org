"use strict";(self.webpackChunkserenity_js_org=self.webpackChunkserenity_js_org||[]).push([[2153],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(96540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},33059:e=>{e.exports=JSON.parse('{"permalink":"/blog/introducing-dynamic-descriptions","editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/blog/2024-06-17-introducing-dynamic-descriptions/index.mdx","source":"@site/src/blog/2024-06-17-introducing-dynamic-descriptions/index.mdx","title":"Introducing dynamic descriptions","description":"\ud83d\udce3 Serenity/JS Tasks, Interactions and Questions now support dynamic descriptions \ud83c\udf89","date":"2024-06-17T00:00:00.000Z","tags":[{"inline":true,"label":"core","permalink":"/blog/tags/core"},{"inline":true,"label":"web","permalink":"/blog/tags/web"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":7.18,"hasTruncateMarker":true,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak","page":null}],"frontMatter":{"slug":"introducing-dynamic-descriptions","title":"Introducing dynamic descriptions","authors":["jan-molak"],"tags":["core","web","open-source"]},"unlisted":false,"prevItem":{"title":"Better API documentation","permalink":"/blog/better-api-documentation"},"nextItem":{"title":"Support for @tags","permalink":"/blog/support-for-tags"}}')},81209:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var i=n(33059),s=n(74848),r=n(28453);const o={slug:"introducing-dynamic-descriptions",title:"Introducing dynamic descriptions",authors:["jan-molak"],tags:["core","web","open-source"]},a=void 0,c={authorsImageUrls:[void 0]},d=[{value:"The old world of static descriptions",id:"the-old-world-of-static-descriptions",level:2},{value:"Using dynamic descriptions",id:"using-dynamic-descriptions",level:2},{value:"Formatting the output",id:"formatting-the-output",level:3},{value:"Querying the description",id:"querying-the-description",level:3},{value:"Overriding the default description",id:"overriding-the-default-description",level:3},{value:"Dynamic descriptions for notes",id:"dynamic-descriptions-for-notes",level:3},{value:"Your feedback matters!",id:"your-feedback-matters",level:2},{value:"\ud83d\udce3 Stay up to date",id:"-stay-up-to-date",level:3},{value:"\ud83d\udc9b Support Serenity/JS",id:"-support-serenityjs",level:3}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"\ud83d\udce3 Serenity/JS Tasks, Interactions and Questions now support dynamic descriptions \ud83c\udf89"}),"\n",(0,s.jsxs)(t.p,{children:["With the new release of ",(0,s.jsx)(t.a,{href:"https://github.com/serenity-js/serenity-js/releases/tag/v3.24.0",children:(0,s.jsx)(t.strong,{children:"Serenity/JS 3.24"})}),", descriptions of ",(0,s.jsx)(t.a,{href:"/api/core/class/Task/",children:"Tasks"}),",\n",(0,s.jsx)(t.a,{href:"/api/core/class/Interaction/",children:"Interactions"}),", and ",(0,s.jsx)(t.a,{href:"/api/core/class/Question/",children:"Questions"}),", including ",(0,s.jsx)(t.a,{href:"/handbook/design/assertions/",children:"assertions"}),"\nand ",(0,s.jsx)(t.a,{href:"/handbook/design/waiting-and-synchronisation/",children:"synchronisation statements"}),",\ncan be ",(0,s.jsx)(t.strong,{children:"determined dynamically at runtime"})," and incorporate the actual values of static and dynamic parameters you passed in."]}),"\n",(0,s.jsxs)(t.p,{children:["The new dynamic descriptions feature is particularly useful when designing custom Serenity/JS tasks that\naccept ",(0,s.jsx)(t.a,{href:"/api/core/function/notes/",children:"notes"})," or other dynamic data structures like ",(0,s.jsx)(t.a,{href:"/api/core/class/Question/",children:"questions"}),",\n",(0,s.jsx)(t.a,{href:"/api/core/#QuestionAdapter",children:"question adapters"}),", or ",(0,s.jsx)(t.a,{href:"/api/core/#Answerable",children:"answerables"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Long story short: to use dynamic descriptions, upgrade to Serenity/JS 3.24 and replace ",(0,s.jsx)(t.a,{href:"/api/core/function/format/",children:(0,s.jsx)(t.code,{children:"d"})}),"\nwith ",(0,s.jsx)(t.a,{href:"/api/core/function/the/",children:(0,s.jsx)(t.code,{children:"the"})})," in your custom Task and Interaction definitions:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-diff",children:"- import { Task, d } from '@serenity-js/core';\n+ import { Task, the } from '@serenity-js/core';\n\nexport const recordItem = (name: Answerable<string>): Task =>\n- Task.where(d`#actor records an item called ${ name }`,\n+ Task.where(the`#actor records an item called ${ name }`,\n    Enter.theValue(name).into(newTodoInput()),\n    Press.the(Key.Enter).in(newTodoInput()),\n    Wait.until(itemNames(), contain(name)),\n  )\n"})}),"\n",(0,s.jsx)(t.p,{children:"This tiny change to your code will enable your Serenity reports to show the actual values of your task and interaction parameters."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Support for dynamic descriptions",src:n(88288).A+"",width:"4198",height:"3049"})}),"\n",(0,s.jsxs)(t.p,{children:["Want to learn more? ",(0,s.jsx)(t.a,{href:"/blog/introducing-dynamic-descriptions/#the-old-world-of-static-descriptions",children:"Read on"}),"!"]}),"\n",(0,s.jsx)(t.h2,{id:"the-old-world-of-static-descriptions",children:"The old world of static descriptions"}),"\n",(0,s.jsxs)(t.p,{children:["Before Serenity/JS 3.24, descriptions of custom ",(0,s.jsx)(t.a,{href:"/api/core/class/Task/",children:"Tasks"}),", ",(0,s.jsx)(t.a,{href:"/api/core/class/Interaction/",children:"Interactions"}),"\nand ",(0,s.jsx)(t.a,{href:"/api/core/class/Question/",children:"Questions"})," had to be defined using a static ",(0,s.jsx)(t.code,{children:"string"})," value.\nThis meant they had to be known when the class was instantiated and couldn't change at runtime."]}),"\n",(0,s.jsx)(t.p,{children:"A typical implementation of a custom task would look similar to this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import { contain } from '@serenity-js/assertions';\nimport { d, Task, Wait } from '@serenity-js/core';\nimport { Enter, Key, Press } from '@serenity-js/web';\n\nimport { newTodoInput } from '../TodoApp';\nimport { itemNames } from '../TodoList';\n\nexport const recordItem = (name: Answerable<string>): Task => // factory function\n  Task.where(d`#actor records an item called ${ name }`,      // static description\n    Enter.theValue(name).into(newTodoInput()),\n    Press.the(Key.Enter).in(newTodoInput()),\n    Wait.until(itemNames(), contain(name)),\n  )\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Here, the ",(0,s.jsx)(t.code,{children:"recordItem(name)"})," factory function producing the ",(0,s.jsx)(t.code,{children:"Task"})," accepts\na parameter of type ",(0,s.jsx)(t.a,{href:"/api/core/#Answerable",children:(0,s.jsx)(t.code,{children:"Answerable<string>"})}),". This design  offers the most freedom to the person\nusing such factory function in their test scenarios as it allows for the parameter to be either a static ",(0,s.jsx)(t.code,{children:"string"}),",\nor any dynamic Serenity/JS data structure that resolves to a ",(0,s.jsx)(t.code,{children:"string"}),".\nSerenity/JS uses this flexible API design extensively, too."]}),"\n",(0,s.jsxs)(t.p,{children:["However, even though the task parameter itself can be determined dynamically at runtime,\nthe description of the task is a static ",(0,s.jsx)(t.code,{children:"string"}),"\nthat's defined when the task is created."]}),"\n",(0,s.jsxs)(t.p,{children:["To make creating such static descriptions easier,\nSerenity/JS offers a ",(0,s.jsxs)(t.a,{href:"/api/core/function/format/",children:["formatting function - ",(0,s.jsx)(t.code,{children:"d"})]}),".\nThis ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates",children:"tag function"}),"\ninspects the parameters injected into the template literal, and for primitive data types like ",(0,s.jsx)(t.code,{children:"string"})," or ",(0,s.jsx)(t.code,{children:"number"})," leaves their value as is,\nand for the complex types tries to generate a sensible description."]}),"\n",(0,s.jsxs)(t.p,{children:["Unfortunately, it tends to fall short when producing descriptions of chained ",(0,s.jsx)(t.a,{href:"/api/core/#QuestionAdapter",children:"question adapters"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"For example, the following scenario:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"await actor.attemptsTo(\n\n  startWithAnEmptyList(),\n\n  notes<MyNotes>().set('items', [ 'read a book' ]),\n\n  recordItem(notes<MyNotes>().get('items')[0]),\n\n  Ensure.that(\n    itemNames(),\n    contain(notes().get('items')[0])\n  ),\n);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["would produce a report with the dynamic note parameter described as ",(0,s.jsx)(t.code,{children:"<<a note of items>>[0]"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'Alice starts with an empty list\nAlice takes note of items\nAlice records an item called <<a note of items>>[0]\n    Alice enters \'<<a note of items>>[0]\' into "What needs to be done?" input box\n    Alice presses key Enter in "What needs to be done?" input box\n    Alice waits until displayed items contain <<a note of items>>[0]\nAlice ensures that displayed items contain <<a note of items>>[0]\n'})}),"\n",(0,s.jsx)(t.p,{children:"While this description is accurate and correct, it could be more developer-friendly."}),"\n",(0,s.jsx)(t.h2,{id:"using-dynamic-descriptions",children:"Using dynamic descriptions"}),"\n",(0,s.jsxs)(t.p,{children:["Starting with Serenity/JS 3.24, descriptions provided to ",(0,s.jsx)(t.a,{href:"/api/core/class/Task/#where",children:(0,s.jsx)(t.code,{children:"Task.where"})}),",\n",(0,s.jsx)(t.a,{href:"/api/core/class/Interaction/#where",children:(0,s.jsx)(t.code,{children:"Interaction.where"})})," and ",(0,s.jsx)(t.a,{href:"/api/core/class/Question/#about",children:(0,s.jsx)(t.code,{children:"Question.about"})}),"\ncan be a dynamic ",(0,s.jsx)(t.code,{children:"Answerable<string>"})," instead of just a static ",(0,s.jsx)(t.code,{children:"string"}),".\nDescriptions defined this way get resolved when the activity is performed, rather than when it's instantiated."]}),"\n",(0,s.jsxs)(t.p,{children:["It's very easy to modify your existing custom tasks and interaction as all you need to do is to use the new tag function\n",(0,s.jsx)(t.a,{href:"/api/core/function/the/",children:(0,s.jsx)(t.code,{children:"the"})})," - a far more powerful successor of ",(0,s.jsx)(t.code,{children:"d"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import { contain } from '@serenity-js/assertions';\nimport { Task, the, Wait } from '@serenity-js/core';    // use `the`, not `d`\nimport { Enter, Key, Press } from '@serenity-js/web';\n\nimport { newTodoInput } from '../TodoApp';\nimport { itemNames } from '../TodoList';\n\nexport const recordItem = (name: Answerable<string>): Task => // factory function\n  Task.where(the`#actor records an item called ${ name }`,    // dynamic description\n    Enter.theValue(name).into(newTodoInput()),\n    Press.the(Key.Enter).in(newTodoInput()),\n    Wait.until(itemNames(), contain(name)),\n  )\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Replacing ",(0,s.jsx)(t.code,{children:"d"})," with ",(0,s.jsx)(t.code,{children:"the"})," in your custom tasks and interactions will make your Serenity reports more developer-friendly,\nespecially if you're using ",(0,s.jsx)(t.a,{href:"/api/core/function/notes/",children:(0,s.jsx)(t.code,{children:"notes"})})," or other dynamic data structures in your test scenarios:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'Alice starts with an empty list\nAlice takes notes:\n- items: [ \'read a book\' ]\nAlice records an item called "read a book"\n    Alice enters "read a book" into "What needs to be done?" input box\n    Alice presses key Enter in "What needs to be done?" input box\n    Alice waits until displayed items contain "read a book"\nAlice ensures that displayed items contain "read a book"\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"the"})," works in a similar way to ",(0,s.jsx)(t.code,{children:"d"}),", with two significant differences:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"it gives you more flexibility over how the output is formatted"}),"\n",(0,s.jsx)(t.li,{children:"it queries the parameters to determine their description instead of inspecting them"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"formatting-the-output",children:"Formatting the output"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"the"})," allows you to ",(0,s.jsx)(t.a,{href:"/api/core/interface/DescriptionFormattingOptions/",children:"configure the formatting"}),",\nso you can trim the descriptions of long input parameters:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"the({ maxLength: 16 })`#actor records an item called ${ name }`,\n// ^ trims any template parameter to 16 characters, so that calling:\n//\n// actor.attemptsto(\n//   recordItem('Really long string')\n// )\n//\n// gets reported as:\n//   `Alice records an item called \"Really long s...\"`\n"})}),"\n",(0,s.jsx)(t.p,{children:"By default, descriptions are not trimmed."}),"\n",(0,s.jsx)(t.h3,{id:"querying-the-description",children:"Querying the description"}),"\n",(0,s.jsxs)(t.p,{children:["Starting with Serenity/JS 3.24, ",(0,s.jsx)(t.code,{children:"Task"}),", ",(0,s.jsx)(t.code,{children:"Interaction"})," and ",(0,s.jsx)(t.code,{children:"Question"})," are now ",(0,s.jsx)(t.a,{href:"/api/core/class/Describable/",children:(0,s.jsx)(t.code,{children:"Describable"})}),"\nand offer a new public method ",(0,s.jsx)(t.a,{href:"/api/core/class/Describable/#describedBy",children:(0,s.jsx)(t.code,{children:"describedBy(actor)"})}),", expected to return\nthe description of the object, in the context of the given actor, at the current point in time."]}),"\n",(0,s.jsxs)(t.p,{children:["If a parameter injected into the template literal is a ",(0,s.jsx)(t.code,{children:"Describable"}),", ",(0,s.jsx)(t.code,{children:"the"})," will call its ",(0,s.jsx)(t.code,{children:"describedBy(actor)"}),"\nmethod to determine its description."]}),"\n",(0,s.jsxs)(t.p,{children:["To ensure backwards compatibility, all questions created via ",(0,s.jsx)(t.a,{href:"/api/core/class/Question/#about",children:(0,s.jsx)(t.code,{children:"Question.about"})})," are still described using their static description by default.\nAnd so, executing the below scenario:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import { Ensure, isAfter } from '@serenity-js/assertions';\nimport { Question, isAfter, the, Timestamp } from '@serenity-js/core';\n\nconst now = () =>\n  Question.about('current time', actor => Timestamp.now());\n\nconst setClockTo = (time: Answerable<Timestamp>) =>\n  Task.where(the`#actor sets the clock to ${ time }`,\n    // log the parameter and pretend we're setting some clock\n    Log.the(time)\n  )\n\nawait actor.attemptsTo(\n  setClockTo(now()),\n);\n"})}),"\n",(0,s.jsx)(t.p,{children:"will result in a test report similar to the below:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Alice sets the clock to current time\n"})}),"\n",(0,s.jsx)(t.h3,{id:"overriding-the-default-description",children:"Overriding the default description"}),"\n",(0,s.jsx)(t.p,{children:"You can now override the default description of a question and make it dynamic, for example to have some of your custom questions reported using their actual value."}),"\n",(0,s.jsx)(t.p,{children:"To do that, override their default description by calling:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Question#describedAs(Question.formattedValue())"}),","]}),"\n",(0,s.jsxs)(t.li,{children:["or ",(0,s.jsx)(t.code,{children:"Question#describedAs(Question.formattedValue({ maxLength: number }))"}),":"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Below, the factory function ",(0,s.jsx)(t.code,{children:"now()"})," returns a custom question designed to be reported using its formatted returned value:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import { Ensure, isAfter } from '@serenity-js/assertions';\nimport { Question, isAfter, the, Timestamp } from '@serenity-js/core';\n\nconst now = () =>\n  Question.about('current time', actor => Timestamp.now())\n    .describedAs(Question.formattedValue());\n\nconst setClockTo = (time: Answerable<Timestamp>) =>\n  Task.where(the`#actor sets the clock to ${ time }`,\n    // log the parameter and pretend we're setting some clock\n    Log.the(time)\n  )\n\nawait actor.attemptsTo(\n  setClockTo(now()),\n);\n"})}),"\n",(0,s.jsx)(t.p,{children:"The modified implementation will now produce report output similar to the below:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Alice sets the clock to 2024-06-17T19:29:16.704Z\n"})}),"\n",(0,s.jsx)(t.h3,{id:"dynamic-descriptions-for-notes",children:"Dynamic descriptions for notes"}),"\n",(0,s.jsxs)(t.p,{children:["Starting with Serenity/JS 3.24, question adapter returned by calling ",(0,s.jsx)(t.code,{children:"notes<T>.get('noteName')"})," is described using the formatted value of the note.\nIf you'd rather have it use a static description instead, you can override it by calling ",(0,s.jsx)(t.a,{href:"/api/core/class/Question/#describedAs",children:(0,s.jsx)(t.code,{children:"Question#describedAs(description)"})}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"await actor.attemptsTo(\n\n  startWithAnEmptyList(),\n\n  notes<MyNotes>().set('items', [ 'read a book' ]),\n\n  recordItem(\n    notes<MyNotes>().get('items')[0].describedAs('first item')\n  ),\n\n  Ensure.that(\n    itemNames(),\n    contain(notes().get('items')[0])\n  ),\n);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"your-feedback-matters",children:"Your feedback matters!"}),"\n",(0,s.jsx)(t.p,{children:"I hope this latest release of Serenity/JS will make it even easier for you and your team to create high-quality test automation."}),"\n",(0,s.jsx)(t.p,{children:"Let me know what you think of the new features in the comments below \ud83d\udc47\ud83d\udc47\ud83d\udc47"}),"\n",(0,s.jsx)(t.h3,{id:"-stay-up-to-date",children:"\ud83d\udce3 Stay up to date"}),"\n",(0,s.jsxs)(t.p,{children:["New features, tutorials, and demos are coming soon!\nFollow ",(0,s.jsx)(t.a,{href:"https://www.linkedin.com/company/serenity-js",children:"Serenity/JS on LinkedIn"}),",\nsubscribe to ",(0,s.jsx)(t.a,{href:"https://www.youtube.com/@serenity-js",children:"Serenity/JS channel on YouTube"})," and join the ",(0,s.jsx)(t.a,{href:"https://matrix.to/#/#serenity-js:gitter.im",children:"Serenity/JS Community Chat"})," to stay up to date!\nPlease also make sure to star \u2b50\ufe0f ",(0,s.jsx)(t.a,{href:"https://github.com/serenity-js/serenity-js",children:"Serenity/JS on GitHub"})," to help others discover the framework!"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.linkedin.com/company/serenity-js",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin",alt:"Follow Serenity/JS on LinkedIn"})}),"\n",(0,s.jsx)(t.a,{href:"https://www.youtube.com/@serenity-js",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube",alt:"Watch Serenity/JS on YouTube"})}),"\n",(0,s.jsx)(t.a,{href:"https://matrix.to/#/#serenity-js:gitter.im",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix",alt:"Join Serenity/JS Community Chat"})}),"\n",(0,s.jsx)(t.a,{href:"https://github.com/serenity-js/serenity-js",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/github/stars/serenity-js/serenity-js?label=Serenity%2FJS&logo=github&style=badge",alt:"GitHub stars"})})]}),"\n",(0,s.jsx)(t.h3,{id:"-support-serenityjs",children:"\ud83d\udc9b Support Serenity/JS"}),"\n",(0,s.jsx)(t.p,{children:"If you appreciate all the effort that goes into making sophisticated tools easy to work with, please support our work and become a Serenity/JS GitHub Sponsor today!"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/sponsors/serenity-js",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Support%20@serenity%2FJS-703EC8?style=for-the-badge&logo=github&logoColor=white",alt:"GitHub Sponsors"})})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},88288:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/dynamic-descriptions-report-9fa862459f9a59bab1699dd41b864ffe.png"}}]);