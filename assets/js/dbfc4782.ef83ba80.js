"use strict";(self.webpackChunkserenity_js_org=self.webpackChunkserenity_js_org||[]).push([[8749],{91895:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"support-for-webdriverio-9","metadata":{"permalink":"/blog/support-for-webdriverio-9","editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/blog/2024-12-12-support-for-webdriverio-9/index.mdx","source":"@site/src/blog/2024-12-12-support-for-webdriverio-9/index.mdx","title":"Support for WebdriverIO 9","description":"We\u2019re thrilled to announce the release of Serenity/JS 3.31, marking a significant step forward for modern test automation.","date":"2024-12-12T00:00:00.000Z","tags":[{"inline":true,"label":"core","permalink":"/blog/tags/core"},{"inline":true,"label":"webdriverio","permalink":"/blog/tags/webdriverio"},{"inline":true,"label":"web","permalink":"/blog/tags/web"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":2.54,"hasTruncateMarker":true,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak","page":null}],"frontMatter":{"slug":"support-for-webdriverio-9","title":"Support for WebdriverIO 9","authors":["jan-molak"],"tags":["core","webdriverio","web","open-source"]},"unlisted":false,"nextItem":{"title":"Simplifying test automation infrastructure","permalink":"/blog/simplifying-test-automation-infrastructure"}},"content":"We\u2019re thrilled to announce the release of Serenity/JS 3.31, marking a significant step forward for modern test automation.\\nThis release introduces support for **WebdriverIO 9**,\\nwhile maintaining compatibility with **WebdriverIO 8** for projects that are not yet ready to migrate ([#2572](https://github.com/serenity-js/serenity-js/issues/2572)).\\n\\nLet\u2019s explore what makes this update exciting!\\n\\n{/* truncate */}\\n\\n:::tip New to Serenity/JS?\\nNew to Serenity/JS or test automation? Start with [\\"Your first web scenario\\"](/handbook/tutorials/your-first-web-scenario/),\\npraised by our community as \\"the best guide to take your automation skills to the next level.\\"\\n:::\\n\\n## New in Serenity/JS 3.31\\n\\n### Support for WebdriverIO 9\\n\\nThe most notable new feature introduced by [WebdriverIO 9](https://webdriver.io/blog/2024/08/15/webdriverio-v9-release/) is support for the **WebDriver BiDi protocol**.\\nThis new protocol enables modern test automation capabilities like network request mocking and console log inspection,\\nwhich will be progressively supported with dedicated Screenplay Pattern interactions in upcoming Serenity/JS releases.\\n\\nThanks to Serenity/JS being an [abstraction over WebdriverIO](/handbook/architecture/) (and other [web integration tools](/api/web/)), upgrading to WebdriverIO 9 should require only a few simple configuration updates\\nto replace the deprecated configuration properties.\\nIn most cases, no changes to test code are needed helping your team stay up-to-date with your tools while minimising the maintenance cost of your Serenity/JS-based frameworks.\\n\\nWe owe special thanks to [Christian Bromann](https://github.com/christian-bromann), Head of the WebdriverIO project, for supporting us in integrating Serenity/JS with this new release.\\n\\nThank you, Christian!\\n\\n### Continued support for WebdriverIO 8\\n\\nSerenity/JS continues to support WebdriverIO 8 via the new [`@serenity-js/webdriverio-8`](/api/webdriverio-8/) module, offering stability for teams not yet ready to upgrade.\\nThis ensures smooth transition without compromising existing projects.\\n\\n### Brand new WebdriverIO guide\\n\\nWe\'ve revised, simplified, and updated the [Serenity/JS WebdriverIO integration guide](/handbook/test-runners/webdriverio/) to reflect the latest changes, making it easier for you to get started with Serenity/JS and WebdriverIO 9.\\n\\n### Updated WebdriverIO Project Templates\\n\\n[Serenity/JS Project Templates](/handbook/project-templates/) now default to WebdriverIO 9, making it easy for new projects to start with the latest features.\\n\\n## Upgrading to Serenity/JS 3.31\\n\\nTo upgrade your existing project to **Serenity/JS 3.31** and **WebdriverIO 9**, follow our new [WebdriverIO 9 upgrade guide](/handbook/test-runners/webdriverio/#upgrading-to-webdriverio-9).\\n\\nIf you\'d like to upgrade Serenity/JS but keep using **WebdriverIO 8**, follow these steps:\\n- install the `@serenity-js/webdriverio-8` module instead of `@serenity-js/webdriverio`,\\n- replace any imports of `@serenity-js/webdriverio` with `@serenity-js/webdriverio-8`.\\n\\n## Your feedback matters!\\n\\nI hope this latest release of Serenity/JS will make it even easier for you and your team to create high-quality test automation.\\n\\nLet me know what you think of the new features in the [comments below](/blog/better-api-documentation/#giscus-comments) \ud83d\udc47\ud83d\udc47\ud83d\udc47\\n\\n### \ud83d\udce3 Stay up to date\\n\\nNew features, tutorials, and demos are coming soon!\\nFollow [Serenity/JS on LinkedIn](https://www.linkedin.com/company/serenity-js),\\nsubscribe to [Serenity/JS channel on YouTube](https://www.youtube.com/@serenity-js) and join the [Serenity/JS Community Chat](https://matrix.to/#/#serenity-js:gitter.im) to stay up to date!\\nPlease also make sure to star \u2b50\ufe0f [Serenity/JS on GitHub](https://github.com/serenity-js/serenity-js) to help others discover the framework!\\n\\n[![Follow Serenity/JS on LinkedIn](https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin)](https://www.linkedin.com/company/serenity-js)\\n[![Watch Serenity/JS on YouTube](https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube)](https://www.youtube.com/@serenity-js)\\n[![Join Serenity/JS Community Chat](https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix)](https://matrix.to/#/#serenity-js:gitter.im)\\n[![GitHub stars](https://img.shields.io/github/stars/serenity-js/serenity-js?label=Serenity%2FJS&logo=github&style=badge)](https://github.com/serenity-js/serenity-js)\\n\\n### \ud83d\udc9b Support Serenity/JS\\n\\nIf you appreciate all the effort that goes into making sophisticated tools easy to work with, please support our work and become a Serenity/JS GitHub Sponsor today!\\n\\n[![GitHub Sponsors](https://img.shields.io/badge/Support%20@serenity%2FJS-703EC8?style=for-the-badge&logo=github&logoColor=white)](https://github.com/sponsors/serenity-js)"},{"id":"simplifying-test-automation-infrastructure","metadata":{"permalink":"/blog/simplifying-test-automation-infrastructure","editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/blog/2024-11-22-simplifying-test-automation-infrastructure/index.mdx","source":"@site/src/blog/2024-11-22-simplifying-test-automation-infrastructure/index.mdx","title":"Simplifying test automation infrastructure","description":"The Serenity/JS team is excited to unveil version 3.30, a release focused on helping you simplify your test automation infrastructure.","date":"2024-11-22T00:00:00.000Z","tags":[{"inline":true,"label":"core","permalink":"/blog/tags/core"},{"inline":true,"label":"serenity-bdd","permalink":"/blog/tags/serenity-bdd"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":2.915,"hasTruncateMarker":true,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak","page":null}],"frontMatter":{"slug":"simplifying-test-automation-infrastructure","title":"Simplifying test automation infrastructure","authors":["jan-molak"],"tags":["core","serenity-bdd","open-source"]},"unlisted":false,"prevItem":{"title":"Support for WebdriverIO 9","permalink":"/blog/support-for-webdriverio-9"},"nextItem":{"title":"Introducing Numeric","permalink":"/blog/introducing-numeric"}},"content":"The Serenity/JS team is excited to unveil version 3.30, a release focused on helping you simplify your test automation infrastructure.\\nThis update introduces:\\n- streamlined installation process for Serenity BDD,\\n- support for Node-only artifact registries like Verdaccio,\\n- support for Playwright 1.49,\\n- all Serenity/JS Project Templates updated to reflect these improvements.\\n\\nLet\u2019s explore what\u2019s new!\\n\\n{/* truncate */}\\n\\n:::tip New to Serenity/JS?\\nNew to Serenity/JS or test automation? Start with [\\"Your first web scenario\\"](/handbook/tutorials/your-first-web-scenario/),\\npraised by our community as \\"the best guide to take your automation skills to the next level.\\"\\n:::\\n\\n## New in Serenity/JS 3.30\\n\\n### Streamlined Serenity BDD Installation\\n\\nOne of the most exciting additions in this release is the inclusion of the Serenity BDD CLI jar file directly within the `@serenity-js/serenity-bdd` Node module.\\nThis improvement eliminates the need for a separate download, helps to simplify the installation process, and reduces friction for teams getting started with Serenity/JS\\n([#2560](https://github.com/serenity-js/serenity-js/issues/2560)).\\n\\nWe owe special thanks to [Anton Fedorov](https://github.com/fapspirit) from Amazon Web Services for proposing this feature\\nand contributing its implementation. Anton\u2019s work is a fantastic example of the open-source spirit driving Serenity/JS forward.\\n\\nThank you, Anton!\\n\\n### Improved support for private and Node-only artifact registries\\n\\nSerenity/JS has always supported private artifact registries like Sonatype Nexus or JFrog Artifactory.\\nHowever, corporate proxies and network constraints could sometimes\\nmake the [setup process](/handbook/reporting/serenity-bdd-reporter/#using-a-custom-serenity-bdd-cli) a bit more complex than we would have liked.\\n\\nSerenity/JS 3.30 includes the Serenity BDD CLI jar directly in the `@serenity-js/serenity-bdd` Node module.\\nThis change simplifies your infrastructure by letting you use a single registry for both Node modules and the Serenity BDD CLI jar\\nand enables support for Node-only artifact registries like [Verdaccio](https://verdaccio.org/).\\n\\n### Playwright 1.49 compatibility\\n\\nKeeping Serenity/JS at the cutting edge of browser automation, this release introduces support for Playwright 1.49.\\nWith it, you can leverage the latest advancements in browser automation across Chromium, Firefox, and WebKit.\\n\\nAdditionally, Playwright 1.49 brings improved handling and more accurate reporting on nested errors ([playwright#26848](https://github.com/microsoft/playwright/issues/26848)),\\nmaking it easier to diagnose issues with custom Serenity/JS configuration ([#1823](https://github.com/serenity-js/serenity-js/issues/1823)).\\n\\n### Updated Serenity/JS Project Templates\\n\\nGetting started with Serenity/JS has never been easier! The [Serenity/JS Project Templates](/handbook/project-templates/) have been updated\\nto reflect the latest improvements, helping you kickstart your projects with best practices built right in.\\n\\n## Upgrading to Serenity/JS 3.30\\n\\nTo upgrade your existing project to Serenity/JS 3.30, use a tool like [`npm-check-updates`](https://www.npmjs.com/package/npm-check-updates):\\n\\n```sh\\nnpx -y npm-check-updates \'/@serenity-js|playwright/\' -u\\n```\\n\\nNext, remove the call to `serenity-bdd update` from your `package.json` file:\\n\\n```diff\\n{\\n  \\"scripts\\": {\\n-   \\"postinstall\\": \\"serenity-bdd update\\",\\n    \\"clean\\": \\"rimraf target\\",\\n    \\"test\\": \\"failsafe clean test:execute test:report\\",\\n    \\"test:execute\\": \\"playwright test\\",\\n    \\"test:report\\": \\"serenity-bdd run\\"\\n  }\\n}\\n```\\n\\nFinally, install the updated modules:\\n\\n```npm2yarn\\nnpm install\\n```\\n\\n## Your feedback matters!\\n\\nI hope this latest release of Serenity/JS will make it even easier for you and your team to create high-quality test automation.\\n\\nLet me know what you think of the new features in the [comments below](/blog/better-api-documentation/#giscus-comments) \ud83d\udc47\ud83d\udc47\ud83d\udc47\\n\\n### \ud83d\udce3 Stay up to date\\n\\nNew features, tutorials, and demos are coming soon!\\nFollow [Serenity/JS on LinkedIn](https://www.linkedin.com/company/serenity-js),\\nsubscribe to [Serenity/JS channel on YouTube](https://www.youtube.com/@serenity-js) and join the [Serenity/JS Community Chat](https://matrix.to/#/#serenity-js:gitter.im) to stay up to date!\\nPlease also make sure to star \u2b50\ufe0f [Serenity/JS on GitHub](https://github.com/serenity-js/serenity-js) to help others discover the framework!\\n\\n[![Follow Serenity/JS on LinkedIn](https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin)](https://www.linkedin.com/company/serenity-js)\\n[![Watch Serenity/JS on YouTube](https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube)](https://www.youtube.com/@serenity-js)\\n[![Join Serenity/JS Community Chat](https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix)](https://matrix.to/#/#serenity-js:gitter.im)\\n[![GitHub stars](https://img.shields.io/github/stars/serenity-js/serenity-js?label=Serenity%2FJS&logo=github&style=badge)](https://github.com/serenity-js/serenity-js)\\n\\n### \ud83d\udc9b Support Serenity/JS\\n\\nIf you appreciate all the effort that goes into making sophisticated tools easy to work with, please support our work and become a Serenity/JS GitHub Sponsor today!\\n\\n[![GitHub Sponsors](https://img.shields.io/badge/Support%20@serenity%2FJS-703EC8?style=for-the-badge&logo=github&logoColor=white)](https://github.com/sponsors/serenity-js)"},{"id":"introducing-numeric","metadata":{"permalink":"/blog/introducing-numeric","editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/blog/2024-09-26-introducing-numeric/index.mdx","source":"@site/src/blog/2024-09-26-introducing-numeric/index.mdx","title":"Introducing Numeric","description":"Love numbers? You\'ll love Serenity/JS 3.29! \ud83c\udf89","date":"2024-09-26T00:00:00.000Z","tags":[{"inline":true,"label":"core","permalink":"/blog/tags/core"},{"inline":true,"label":"web","permalink":"/blog/tags/web"},{"inline":true,"label":"rest","permalink":"/blog/tags/rest"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":2.085,"hasTruncateMarker":true,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak","page":null}],"frontMatter":{"slug":"introducing-numeric","title":"Introducing Numeric","authors":["jan-molak"],"tags":["core","web","rest","open-source"]},"unlisted":false,"prevItem":{"title":"Simplifying test automation infrastructure","permalink":"/blog/simplifying-test-automation-infrastructure"},"nextItem":{"title":"Better API documentation","permalink":"/blog/better-api-documentation"}},"content":"Love numbers? You\'ll love Serenity/JS 3.29! \ud83c\udf89\\n\\nWe\u2019re excited to share the latest release of Serenity/JS, which is packed with new powerful features for handling numeric data in your automated tests!\\n\\n{/* truncate */}\\n\\n:::tip New to Serenity/JS?\\nNew to Serenity/JS or test automation? Start with [\\"Your first web scenario\\"](/handbook/tutorials/your-first-web-scenario/),\\npraised by our community as \\"the best guide to take your automation skills to the next level.\\"\\n:::\\n\\n## New in Serenity/JS 3.29\\n\\n### Built-in support for arithmetic operations\\n\\nPart of the [Serenity/JS Core module](/api/core/), the new [`Numeric`](/api/core/class/Numeric/) class offers built-in support for performing arithmetic operations\\non both synchronous and asynchronous data types directly within your Serenity/JS test scenarios.\\n\\nIn addition, this new class offers methods to help you extract numeric data from REST API responses and web interfaces\\nand convert it to a desired numeric data type without any external libraries or complex workarounds.\\n\\nThis enhancement makes your tests more readable, reduces the risk of calculation errors, and ensures data-driven scenarios are both easy to implement and maintain.\\nWith `Numeric`, your test logic is cleaner, making Serenity/JS even more developer-friendly.\\n\\nLearn about [`Numeric`](/api/core/class/Numeric/).\\n\\n\\n### More Serenity/JS examples in your IDE!\\n\\nWe continue our effort to bring the thousands of examples available in the [Serenity/JS API documentation](/api/) close to you and your team.\\nAs part of that, the new [`Numeric`](/api/core/class/Numeric/) class ships with **15 new examples**, demonstrating how to extract numeric data from user interfaces and data objects.\\nYou\'ll also learn how to use the new features with [Serenity/JS Page Element Query Language](/handbook/web-testing/page-element-query-language/) to make extracting the right UI element even easier!\\n\\nCheck out the Serenity/JS API docs at https://serenity-js.org/api/\\n\\nEnjoy Serenity!\\n\\n![Numeric API Documentation in Your IDE](./numeric-api-docs.png)\\n\\n\\n## Your feedback matters!\\n\\nI hope this latest release of Serenity/JS will make it even easier for you and your team to create high-quality test automation.\\n\\nLet me know what you think of the new features in the [comments below](/blog/better-api-documentation/#giscus-comments) \ud83d\udc47\ud83d\udc47\ud83d\udc47\\n\\n### \ud83d\udce3 Stay up to date\\n\\nNew features, tutorials, and demos are coming soon!\\nFollow [Serenity/JS on LinkedIn](https://www.linkedin.com/company/serenity-js),\\nsubscribe to [Serenity/JS channel on YouTube](https://www.youtube.com/@serenity-js) and join the [Serenity/JS Community Chat](https://matrix.to/#/#serenity-js:gitter.im) to stay up to date!\\nPlease also make sure to star \u2b50\ufe0f [Serenity/JS on GitHub](https://github.com/serenity-js/serenity-js) to help others discover the framework!\\n\\n[![Follow Serenity/JS on LinkedIn](https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin)](https://www.linkedin.com/company/serenity-js)\\n[![Watch Serenity/JS on YouTube](https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube)](https://www.youtube.com/@serenity-js)\\n[![Join Serenity/JS Community Chat](https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix)](https://matrix.to/#/#serenity-js:gitter.im)\\n[![GitHub stars](https://img.shields.io/github/stars/serenity-js/serenity-js?label=Serenity%2FJS&logo=github&style=badge)](https://github.com/serenity-js/serenity-js)\\n\\n### \ud83d\udc9b Support Serenity/JS\\n\\nIf you appreciate all the effort that goes into making sophisticated tools easy to work with, please support our work and become a Serenity/JS GitHub Sponsor today!\\n\\n[![GitHub Sponsors](https://img.shields.io/badge/Support%20@serenity%2FJS-703EC8?style=for-the-badge&logo=github&logoColor=white)](https://github.com/sponsors/serenity-js)"},{"id":"better-api-documentation","metadata":{"permalink":"/blog/better-api-documentation","editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/blog/2024-09-03-better-api-documentation/index.mdx","source":"@site/src/blog/2024-09-03-better-api-documentation/index.mdx","title":"Better API documentation","description":"In the ever-evolving world of software development, the importance of clear, concise, and accessible documentation cannot be overstated.","date":"2024-09-03T00:00:00.000Z","tags":[{"inline":true,"label":"core","permalink":"/blog/tags/core"},{"inline":true,"label":"web","permalink":"/blog/tags/web"},{"inline":true,"label":"rest","permalink":"/blog/tags/rest"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":2.88,"hasTruncateMarker":true,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak","page":null}],"frontMatter":{"slug":"better-api-documentation","title":"Better API documentation","authors":["jan-molak"],"tags":["core","web","rest","open-source"]},"unlisted":false,"prevItem":{"title":"Introducing Numeric","permalink":"/blog/introducing-numeric"},"nextItem":{"title":"Introducing dynamic descriptions","permalink":"/blog/introducing-dynamic-descriptions"}},"content":"In the ever-evolving world of software development, the importance of clear, concise, and accessible documentation cannot be overstated.\\nThe Serenity/JS team is thrilled to announce a series of significant improvements to our API documentation, designed to enhance the developer experience and streamline the process of building automated acceptance tests.\\nThese updates are crafted to support developers at every stage of their journey, from understanding the basics to mastering the intricacies of the framework.\\n\\n{/* truncate */}\\n\\n## A new gateway to learning\\n\\nThe newly revamped [API Docs landing page](/api) serves as the central hub for all things Serenity/JS,\\nproviding a comprehensive overview that we believe is both welcoming to newcomers and invaluable to seasoned developers.\\nThe landing page is now your go-to resource for navigating the extensive Serenity/JS ecosystem.\\nWhether you\u2019re looking for detailed class references, method signatures, or specific modules, the structured layout ensures that everything you need is just a click away.\\n\\n## Compatibility at a glance\\n\\nOne of the standout additions to our documentation is the [Serenity/JS compatibility matrix](https://serenity-js.org/releases/), a tool we believe will help developers stay up to date with their project\'s dependencies.\\n\\nThis page is especially useful because:\\n\\n- *Version Matching*: It allows you to quickly determine which versions of Serenity/JS are compatible with your project\u2019s existing setup, helping to prevent integration issues before they arise.\\n- *Upgrade Guidance*: The matrix offers insights into the latest compatible versions, making it easier for developers to plan upgrades without disrupting their workflow.\\n- *Cross-Referencing*: Links to detailed release notes and API changes offer immediate access to further information, enabling you to make informed decisions about when and how to update your dependencies.\\n\\n## API documentation in your IDE\\n\\nAnother exciting improvement is the availability of diagrams, examples, and direct links to the API documentation directly within your IDE. These enhancements ensure that you have all the necessary resources at your fingertips, right when you need them. With context-specific information available inline, you no longer need to interrupt your workflow to search for documentation elsewhere.\\n\\n- *Contextual Diagrams*: Visual representations of class hierarchies and relationships help you understand how different parts of the framework interact, improving comprehension and reducing errors.\\n- *Embedded Examples*: Code snippets within the IDE provide immediate examples of how to implement specific features, speeding up development and reinforcing learning.\\n- *Instant Documentation* Links: With direct links to the Serenity/JS API docs embedded in your code editor, you can quickly reference detailed documentation without breaking your focus.\\n\\nThese improvements are designed to keep developers in their flow, reducing the time spent searching for information and increasing productivity.\\n\\n![API Documentation in Your IDE](./api-documentation-in-your-ide.png)\\n\\n## Your feedback matters!\\n\\nI hope this latest release of Serenity/JS will make it even easier for you and your team to create high-quality test automation.\\n\\nLet me know what you think of the new features in the [comments below](/blog/better-api-documentation/#giscus-comments) \ud83d\udc47\ud83d\udc47\ud83d\udc47\\n\\n### \ud83d\udce3 Stay up to date\\n\\nNew features, tutorials, and demos are coming soon!\\nFollow [Serenity/JS on LinkedIn](https://www.linkedin.com/company/serenity-js),\\nsubscribe to [Serenity/JS channel on YouTube](https://www.youtube.com/@serenity-js) and join the [Serenity/JS Community Chat](https://matrix.to/#/#serenity-js:gitter.im) to stay up to date!\\nPlease also make sure to star \u2b50\ufe0f [Serenity/JS on GitHub](https://github.com/serenity-js/serenity-js) to help others discover the framework!\\n\\n[![Follow Serenity/JS on LinkedIn](https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin)](https://www.linkedin.com/company/serenity-js)\\n[![Watch Serenity/JS on YouTube](https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube)](https://www.youtube.com/@serenity-js)\\n[![Join Serenity/JS Community Chat](https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix)](https://matrix.to/#/#serenity-js:gitter.im)\\n[![GitHub stars](https://img.shields.io/github/stars/serenity-js/serenity-js?label=Serenity%2FJS&logo=github&style=badge)](https://github.com/serenity-js/serenity-js)\\n\\n### \ud83d\udc9b Support Serenity/JS\\n\\nIf you appreciate all the effort that goes into making sophisticated tools easy to work with, please support our work and become a Serenity/JS GitHub Sponsor today!\\n\\n[![GitHub Sponsors](https://img.shields.io/badge/Support%20@serenity%2FJS-703EC8?style=for-the-badge&logo=github&logoColor=white)](https://github.com/sponsors/serenity-js)"},{"id":"introducing-dynamic-descriptions","metadata":{"permalink":"/blog/introducing-dynamic-descriptions","editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/blog/2024-06-17-introducing-dynamic-descriptions/index.mdx","source":"@site/src/blog/2024-06-17-introducing-dynamic-descriptions/index.mdx","title":"Introducing dynamic descriptions","description":"\ud83d\udce3 Serenity/JS Tasks, Interactions and Questions now support dynamic descriptions \ud83c\udf89","date":"2024-06-17T00:00:00.000Z","tags":[{"inline":true,"label":"core","permalink":"/blog/tags/core"},{"inline":true,"label":"web","permalink":"/blog/tags/web"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":7.18,"hasTruncateMarker":true,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak","page":null}],"frontMatter":{"slug":"introducing-dynamic-descriptions","title":"Introducing dynamic descriptions","authors":["jan-molak"],"tags":["core","web","open-source"]},"unlisted":false,"prevItem":{"title":"Better API documentation","permalink":"/blog/better-api-documentation"},"nextItem":{"title":"Support for @tags","permalink":"/blog/support-for-tags"}},"content":"\ud83d\udce3 Serenity/JS Tasks, Interactions and Questions now support dynamic descriptions \ud83c\udf89\\n\\nWith the new release of [**Serenity/JS 3.24**](https://github.com/serenity-js/serenity-js/releases/tag/v3.24.0), descriptions of [Tasks](/api/core/class/Task/),\\n[Interactions](/api/core/class/Interaction/), and [Questions](/api/core/class/Question/), including [assertions](/handbook/design/assertions/)\\nand [synchronisation statements](/handbook/design/waiting-and-synchronisation/),\\ncan be **determined dynamically at runtime** and incorporate the actual values of static and dynamic parameters you passed in.\\n\\nThe new dynamic descriptions feature is particularly useful when designing custom Serenity/JS tasks that\\naccept [notes](/api/core/function/notes/) or other dynamic data structures like [questions](/api/core/class/Question/),\\n[question adapters](/api/core/#QuestionAdapter), or [answerables](/api/core/#Answerable).\\n\\nLong story short: to use dynamic descriptions, upgrade to Serenity/JS 3.24 and replace [`d`](/api/core/function/format/)\\nwith [`the`](/api/core/function/the/) in your custom Task and Interaction definitions:\\n\\n```diff\\n- import { Task, d } from \'@serenity-js/core\';\\n+ import { Task, the } from \'@serenity-js/core\';\\n\\nexport const recordItem = (name: Answerable<string>): Task =>\\n- Task.where(d`#actor records an item called ${ name }`,\\n+ Task.where(the`#actor records an item called ${ name }`,\\n    Enter.theValue(name).into(newTodoInput()),\\n    Press.the(Key.Enter).in(newTodoInput()),\\n    Wait.until(itemNames(), contain(name)),\\n  )\\n```\\n\\nThis tiny change to your code will enable your Serenity reports to show the actual values of your task and interaction parameters.\\n\\n![Support for dynamic descriptions](./dynamic-descriptions-report.png)\\n\\nWant to learn more? [Read on](/blog/introducing-dynamic-descriptions/#the-old-world-of-static-descriptions)!\\n\\n\x3c!--truncate--\x3e\\n\\n## The old world of static descriptions\\n\\nBefore Serenity/JS 3.24, descriptions of custom [Tasks](/api/core/class/Task/), [Interactions](/api/core/class/Interaction/)\\nand [Questions](/api/core/class/Question/) had to be defined using a static `string` value.\\nThis meant they had to be known when the class was instantiated and couldn\'t change at runtime.\\n\\nA typical implementation of a custom task would look similar to this:\\n\\n```ts\\nimport { contain } from \'@serenity-js/assertions\';\\nimport { d, Task, Wait } from \'@serenity-js/core\';\\nimport { Enter, Key, Press } from \'@serenity-js/web\';\\n\\nimport { newTodoInput } from \'../TodoApp\';\\nimport { itemNames } from \'../TodoList\';\\n\\nexport const recordItem = (name: Answerable<string>): Task => // factory function\\n  Task.where(d`#actor records an item called ${ name }`,      // static description\\n    Enter.theValue(name).into(newTodoInput()),\\n    Press.the(Key.Enter).in(newTodoInput()),\\n    Wait.until(itemNames(), contain(name)),\\n  )\\n```\\n\\nHere, the `recordItem(name)` factory function producing the `Task` accepts\\na parameter of type [`Answerable<string>`](/api/core/#Answerable). This design  offers the most freedom to the person\\nusing such factory function in their test scenarios as it allows for the parameter to be either a static `string`,\\nor any dynamic Serenity/JS data structure that resolves to a `string`.\\nSerenity/JS uses this flexible API design extensively, too.\\n\\nHowever, even though the task parameter itself can be determined dynamically at runtime,\\nthe description of the task is a static `string`\\nthat\'s defined when the task is created.\\n\\nTo make creating such static descriptions easier,\\nSerenity/JS offers a [formatting function - `d`](/api/core/function/format/).\\nThis [tag function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates)\\ninspects the parameters injected into the template literal, and for primitive data types like `string` or `number` leaves their value as is,\\nand for the complex types tries to generate a sensible description.\\n\\nUnfortunately, it tends to fall short when producing descriptions of chained [question adapters](/api/core/#QuestionAdapter).\\n\\nFor example, the following scenario:\\n\\n```ts\\nawait actor.attemptsTo(\\n\\n  startWithAnEmptyList(),\\n\\n  notes<MyNotes>().set(\'items\', [ \'read a book\' ]),\\n\\n  recordItem(notes<MyNotes>().get(\'items\')[0]),\\n\\n  Ensure.that(\\n    itemNames(),\\n    contain(notes().get(\'items\')[0])\\n  ),\\n);\\n```\\n\\nwould produce a report with the dynamic note parameter described as `<<a note of items>>[0]`:\\n\\n```\\nAlice starts with an empty list\\nAlice takes note of items\\nAlice records an item called <<a note of items>>[0]\\n    Alice enters \'<<a note of items>>[0]\' into \\"What needs to be done?\\" input box\\n    Alice presses key Enter in \\"What needs to be done?\\" input box\\n    Alice waits until displayed items contain <<a note of items>>[0]\\nAlice ensures that displayed items contain <<a note of items>>[0]\\n```\\n\\nWhile this description is accurate and correct, it could be more developer-friendly.\\n\\n## Using dynamic descriptions\\n\\nStarting with Serenity/JS 3.24, descriptions provided to [`Task.where`](/api/core/class/Task/#where),\\n[`Interaction.where`](/api/core/class/Interaction/#where) and [`Question.about`](/api/core/class/Question/#about)\\ncan be a dynamic `Answerable<string>` instead of just a static `string`.\\nDescriptions defined this way get resolved when the activity is performed, rather than when it\'s instantiated.\\n\\nIt\'s very easy to modify your existing custom tasks and interaction as all you need to do is to use the new tag function\\n[`the`](/api/core/function/the/) - a far more powerful successor of `d`:\\n\\n```ts\\nimport { contain } from \'@serenity-js/assertions\';\\nimport { Task, the, Wait } from \'@serenity-js/core\';    // use `the`, not `d`\\nimport { Enter, Key, Press } from \'@serenity-js/web\';\\n\\nimport { newTodoInput } from \'../TodoApp\';\\nimport { itemNames } from \'../TodoList\';\\n\\nexport const recordItem = (name: Answerable<string>): Task => // factory function\\n  Task.where(the`#actor records an item called ${ name }`,    // dynamic description\\n    Enter.theValue(name).into(newTodoInput()),\\n    Press.the(Key.Enter).in(newTodoInput()),\\n    Wait.until(itemNames(), contain(name)),\\n  )\\n```\\n\\nReplacing `d` with `the` in your custom tasks and interactions will make your Serenity reports more developer-friendly,\\nespecially if you\'re using [`notes`](/api/core/function/notes/) or other dynamic data structures in your test scenarios:\\n\\n```\\nAlice starts with an empty list\\nAlice takes notes:\\n- items: [ \'read a book\' ]\\nAlice records an item called \\"read a book\\"\\n    Alice enters \\"read a book\\" into \\"What needs to be done?\\" input box\\n    Alice presses key Enter in \\"What needs to be done?\\" input box\\n    Alice waits until displayed items contain \\"read a book\\"\\nAlice ensures that displayed items contain \\"read a book\\"\\n```\\n\\n`the` works in a similar way to `d`, with two significant differences:\\n- it gives you more flexibility over how the output is formatted\\n- it queries the parameters to determine their description instead of inspecting them\\n\\n### Formatting the output\\n\\n`the` allows you to [configure the formatting](/api/core/interface/DescriptionFormattingOptions/),\\nso you can trim the descriptions of long input parameters:\\n\\n```ts\\nthe({ maxLength: 16 })`#actor records an item called ${ name }`,\\n// ^ trims any template parameter to 16 characters, so that calling:\\n//\\n// actor.attemptsto(\\n//   recordItem(\'Really long string\')\\n// )\\n//\\n// gets reported as:\\n//   `Alice records an item called \\"Really long s...\\"`\\n```\\n\\nBy default, descriptions are not trimmed.\\n\\n### Querying the description\\n\\nStarting with Serenity/JS 3.24, `Task`, `Interaction` and `Question` are now [`Describable`](/api/core/class/Describable/)\\nand offer a new public method [`describedBy(actor)`](/api/core/class/Describable/#describedBy), expected to return\\nthe description of the object, in the context of the given actor, at the current point in time.\\n\\nIf a parameter injected into the template literal is a `Describable`, `the` will call its `describedBy(actor)`\\nmethod to determine its description.\\n\\nTo ensure backwards compatibility, all questions created via [`Question.about`](/api/core/class/Question/#about) are still described using their static description by default.\\nAnd so, executing the below scenario:\\n\\n```ts\\nimport { Ensure, isAfter } from \'@serenity-js/assertions\';\\nimport { Question, isAfter, the, Timestamp } from \'@serenity-js/core\';\\n\\nconst now = () =>\\n  Question.about(\'current time\', actor => Timestamp.now());\\n\\nconst setClockTo = (time: Answerable<Timestamp>) =>\\n  Task.where(the`#actor sets the clock to ${ time }`,\\n    // log the parameter and pretend we\'re setting some clock\\n    Log.the(time)\\n  )\\n\\nawait actor.attemptsTo(\\n  setClockTo(now()),\\n);\\n```\\n\\nwill result in a test report similar to the below:\\n\\n```\\nAlice sets the clock to current time\\n```\\n\\n### Overriding the default description\\n\\nYou can now override the default description of a question and make it dynamic, for example to have some of your custom questions reported using their actual value.\\n\\nTo do that, override their default description by calling:\\n- `Question#describedAs(Question.formattedValue())`,\\n- or `Question#describedAs(Question.formattedValue({ maxLength: number }))`:\\n\\nBelow, the factory function `now()` returns a custom question designed to be reported using its formatted returned value:\\n\\n```ts\\nimport { Ensure, isAfter } from \'@serenity-js/assertions\';\\nimport { Question, isAfter, the, Timestamp } from \'@serenity-js/core\';\\n\\nconst now = () =>\\n  Question.about(\'current time\', actor => Timestamp.now())\\n    .describedAs(Question.formattedValue());\\n\\nconst setClockTo = (time: Answerable<Timestamp>) =>\\n  Task.where(the`#actor sets the clock to ${ time }`,\\n    // log the parameter and pretend we\'re setting some clock\\n    Log.the(time)\\n  )\\n\\nawait actor.attemptsTo(\\n  setClockTo(now()),\\n);\\n```\\n\\nThe modified implementation will now produce report output similar to the below:\\n\\n```\\nAlice sets the clock to 2024-06-17T19:29:16.704Z\\n```\\n\\n### Dynamic descriptions for notes\\n\\nStarting with Serenity/JS 3.24, question adapter returned by calling `notes<T>.get(\'noteName\')` is described using the formatted value of the note.\\nIf you\'d rather have it use a static description instead, you can override it by calling [`Question#describedAs(description)`](/api/core/class/Question/#describedAs):\\n\\n\\n```ts\\nawait actor.attemptsTo(\\n\\n  startWithAnEmptyList(),\\n\\n  notes<MyNotes>().set(\'items\', [ \'read a book\' ]),\\n\\n  recordItem(\\n    notes<MyNotes>().get(\'items\')[0].describedAs(\'first item\')\\n  ),\\n\\n  Ensure.that(\\n    itemNames(),\\n    contain(notes().get(\'items\')[0])\\n  ),\\n);\\n```\\n\\n## Your feedback matters!\\n\\nI hope this latest release of Serenity/JS will make it even easier for you and your team to create high-quality test automation.\\n\\nLet me know what you think of the new features in the comments below \ud83d\udc47\ud83d\udc47\ud83d\udc47\\n\\n### \ud83d\udce3 Stay up to date\\n\\nNew features, tutorials, and demos are coming soon!\\nFollow [Serenity/JS on LinkedIn](https://www.linkedin.com/company/serenity-js),\\nsubscribe to [Serenity/JS channel on YouTube](https://www.youtube.com/@serenity-js) and join the [Serenity/JS Community Chat](https://matrix.to/#/#serenity-js:gitter.im) to stay up to date!\\nPlease also make sure to star \u2b50\ufe0f [Serenity/JS on GitHub](https://github.com/serenity-js/serenity-js) to help others discover the framework!\\n\\n[![Follow Serenity/JS on LinkedIn](https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin)](https://www.linkedin.com/company/serenity-js)\\n[![Watch Serenity/JS on YouTube](https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube)](https://www.youtube.com/@serenity-js)\\n[![Join Serenity/JS Community Chat](https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix)](https://matrix.to/#/#serenity-js:gitter.im)\\n[![GitHub stars](https://img.shields.io/github/stars/serenity-js/serenity-js?label=Serenity%2FJS&logo=github&style=badge)](https://github.com/serenity-js/serenity-js)\\n\\n### \ud83d\udc9b Support Serenity/JS\\n\\nIf you appreciate all the effort that goes into making sophisticated tools easy to work with, please support our work and become a Serenity/JS GitHub Sponsor today!\\n\\n[![GitHub Sponsors](https://img.shields.io/badge/Support%20@serenity%2FJS-703EC8?style=for-the-badge&logo=github&logoColor=white)](https://github.com/sponsors/serenity-js)"},{"id":"support-for-tags","metadata":{"permalink":"/blog/support-for-tags","editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/blog/2024-03-09-support-for-tags/index.mdx","source":"@site/src/blog/2024-03-09-support-for-tags/index.mdx","title":"Support for @tags","description":"Support for tagging","date":"2024-03-09T00:00:00.000Z","tags":[{"inline":true,"label":"web","permalink":"/blog/tags/web"},{"inline":true,"label":"cucumber","permalink":"/blog/tags/cucumber"},{"inline":true,"label":"jasmine","permalink":"/blog/tags/jasmine"},{"inline":true,"label":"mocha","permalink":"/blog/tags/mocha"},{"inline":true,"label":"playwright-test","permalink":"/blog/tags/playwright-test"},{"inline":true,"label":"protractor","permalink":"/blog/tags/protractor"},{"inline":true,"label":"webdriverio","permalink":"/blog/tags/webdriverio"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":1.045,"hasTruncateMarker":false,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak","page":null}],"frontMatter":{"slug":"support-for-tags","title":"Support for @tags","authors":["jan-molak"],"tags":["web","cucumber","jasmine","mocha","playwright-test","protractor","webdriverio","open-source"]},"unlisted":false,"prevItem":{"title":"Introducing dynamic descriptions","permalink":"/blog/introducing-dynamic-descriptions"},"nextItem":{"title":"Support for Serenity BDD 4","permalink":"/blog/support-for-serenity-bdd-4"}},"content":"![Support for tagging](./support-for-tags.png)\\n\\n\ud83d\udce3 Serenity/JS now supports tagging across all the test runners \ud83c\udf89\\n\\nWith the new release of [**Serenity/JS 3.21**](https://github.com/serenity-js/serenity-js/releases/tag/v3.21.0), tagging test scenarios just got easier.\\nNow, you can use `@tags` across all the supported test runners, so:\\n- [Cucumber](/handbook/test-runners/cucumber/)\\n- [Jasmine](/handbook/test-runners/jasmine/)\\n- [Mocha](/handbook/test-runners/mocha/)\\n- [WebdriverIO](/handbook/test-runners/webdriverio/)\\n- [Playwright Test](/handbook/test-runners/playwright-test/)\\n- [Protractor](/handbook/test-runners/protractor/)\\n\\n## Why should you tag your scenarios?\\n\\nTagging test scenarios helps you organise and filter your test suites. You can categorise tests based on functionality, priority, or type, making it easier to manage and focus your testing efforts.\\n\\nPlus, tagging allows for selective test execution. You can run a subset of tests by specifying relevant tags, which is handy for regression testing or when focusing on specific parts of your application.\\n\\nTagging also improves test reporting and integrates well with test management tools. It gives you insights into test coverage and helps streamline test planning and tracking.\\n\\nAnd if you\'re using Playwright Test, Serenity/JS supports the latest [Playwright 1.42 tag API](https://playwright.dev/docs/release-notes#version-142), enhancing your tagging capabilities even further!\\n\\n## Contributor spotlight\\n\\nA huge thank you to our Serenity/JS Contributors for their work on this release:\\n- [Otoniel Isidoro](https://www.linkedin.com/in/otoniel-isidoro-61b38512/), who enabled tagging support for Playwright Test\\n- [Mateusz Kruk](https://www.linkedin.com/in/mateusz-kruk-2784a3217/), who greatly improved Playwright Test global error handling\\n\\nEnjoy Serenity!"},{"id":"support-for-serenity-bdd-4","metadata":{"permalink":"/blog/support-for-serenity-bdd-4","editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/blog/2024-01-11-support-for-serenity-bdd-4/index.mdx","source":"@site/src/blog/2024-01-11-support-for-serenity-bdd-4/index.mdx","title":"Support for Serenity BDD 4","description":"Serenity/JS 3.15.0 introduces support for Serenity BDD 4 and aggregated test reports for Playwright Test, WebdriverIO, Mocha, Jasmine and Cucumber! \ud83e\udd73","date":"2024-01-11T00:00:00.000Z","tags":[{"inline":true,"label":"web","permalink":"/blog/tags/web"},{"inline":true,"label":"rest","permalink":"/blog/tags/rest"},{"inline":true,"label":"reporting","permalink":"/blog/tags/reporting"},{"inline":true,"label":"jasmine","permalink":"/blog/tags/jasmine"},{"inline":true,"label":"mocha","permalink":"/blog/tags/mocha"},{"inline":true,"label":"protractor","permalink":"/blog/tags/protractor"},{"inline":true,"label":"webdriverio","permalink":"/blog/tags/webdriverio"},{"inline":true,"label":"playwright-test","permalink":"/blog/tags/playwright-test"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":0.665,"hasTruncateMarker":false,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak","page":null}],"frontMatter":{"slug":"support-for-serenity-bdd-4","title":"Support for Serenity BDD 4","authors":["jan-molak"],"tags":["web","rest","reporting","jasmine","mocha","protractor","webdriverio","playwright-test","open-source"]},"unlisted":false,"prevItem":{"title":"Support for @tags","permalink":"/blog/support-for-tags"},"nextItem":{"title":"Support for Playwright Test UI Mode!","permalink":"/blog/support-for-playwright-ui-mode"}},"content":"[**Serenity/JS 3.15.0**](https://github.com/serenity-js/serenity-js/releases/tag/v3.15.0) introduces support for **Serenity BDD 4** and aggregated test reports for Playwright Test, WebdriverIO, Mocha, Jasmine and Cucumber! \ud83e\udd73\\n\\nWe\'ve also updated the Serenity/JS Handbook to help you get the most out of the new Serenity/JS and Serenity BDD reporting features - check out:\\n- [Reporting > Serenity BDD Reporter](/handbook/reporting/serenity-bdd-reporter/)\\n- [Serenity BDD Best Practices](/handbook/reporting/serenity-bdd-reporter/#serenity-bdd-best-practices) (NEW!)\\n\\n### Important changes\\n\\nIf you\'re still using the Serenity/JS 2-style syntax for registering the `SerenityBDDReporter`, you\'ll need to update your configuration file to use the Serenity/JS 3 convention:\\n\\n```diff\\n- import { ArtifactArchiver } from \'@serenity-js/core\';\\n- import { SerenityBDDReporter } from \'@serenity-js/serenity-bdd\';\\n\\n// ...\\n    crew: [\\n-     new SerenityBDDReporter(),\\n-     ArtifactArchiver.storingArtifactsAt(\'./target/site/serenity\'),\\n+     \'@serenity-js/serenity-bdd\',\\n+     [ \'@serenity-js/core:ArtifactArchiver\', {\\n+       outputDirectory: \'target/site/serenity\'\\n+     } ],\\n    ]\\n// ...\\n```\\n\\nLearn more about [Configuring Serenity BDD Reporter](/handbook/reporting/serenity-bdd-reporter/#configuration-overview)."},{"id":"support-for-playwright-ui-mode","metadata":{"permalink":"/blog/support-for-playwright-ui-mode","editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/blog/2023-06-01-support-for-playwright-ui-mode/index.mdx","source":"@site/src/blog/2023-06-01-support-for-playwright-ui-mode/index.mdx","title":"Support for Playwright Test UI Mode!","description":"Playwright Logo","date":"2023-06-01T00:00:00.000Z","tags":[{"inline":true,"label":"web","permalink":"/blog/tags/web"},{"inline":true,"label":"playwright","permalink":"/blog/tags/playwright"},{"inline":true,"label":"playwright-test","permalink":"/blog/tags/playwright-test"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":0.345,"hasTruncateMarker":false,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak","page":null}],"frontMatter":{"slug":"support-for-playwright-ui-mode","title":"Support for Playwright Test UI Mode!","authors":["jan-molak"],"tags":["web","playwright","playwright-test","open-source"]},"unlisted":false,"prevItem":{"title":"Support for Serenity BDD 4","permalink":"/blog/support-for-serenity-bdd-4"},"nextItem":{"title":"Support for WebdriverIO 8","permalink":"/blog/support-for-webdriverio-8"}},"content":"![Playwright Logo](./playwright-logo.svg)\\n\\n[**Serenity/JS 3.3.0**](https://github.com/serenity-js/serenity-js/releases/tag/v3.3.0) introduces support for **Playwright Test UI Mode**, improves support for **Playwright trace viewer**, and leverages **Playwright auto-waiting locators**! \ud83e\udd73\\n\\nCheck out our new tutorial where in **less than 5 minutes**, you\'ll learn how to **integrate Serenity/JS** with your Playwright test suite, **enable Serenity BDD reports**, start using the **Screenplay Pattern**, and get started with **Playwright Test UI Mode**!\\n\\nLearn about [Using Serenity/JS with Playwright Test](/handbook/test-runners/playwright-test/)!"},{"id":"support-for-webdriverio-8","metadata":{"permalink":"/blog/support-for-webdriverio-8","editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/blog/2023-05-10-support-for-webdriverio-8/index.md","source":"@site/src/blog/2023-05-10-support-for-webdriverio-8/index.md","title":"Support for WebdriverIO 8","description":"WebdriverIO Roboter","date":"2023-05-10T00:00:00.000Z","tags":[{"inline":true,"label":"web","permalink":"/blog/tags/web"},{"inline":true,"label":"webdriverio","permalink":"/blog/tags/webdriverio"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":0.465,"hasTruncateMarker":false,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak","page":null}],"frontMatter":{"slug":"support-for-webdriverio-8","title":"Support for WebdriverIO 8","authors":["jan-molak"],"tags":["web","webdriverio","open-source"]},"unlisted":false,"prevItem":{"title":"Support for Playwright Test UI Mode!","permalink":"/blog/support-for-playwright-ui-mode"},"nextItem":{"title":"Test Automation Summit, Berlin 2022","permalink":"/blog/test-automation-summit-berlin"}},"content":"![WebdriverIO Roboter](webdriverio-roboter.png)\\n\\nSerenity/JS started to support WebdriverIO in version 2.30.0. \\n\\nIn version 3.0.0, Serenity/JS brought you [`@serenity-js/web`](/handbook/web-testing/) - a portable abstraction\\nlayer that lets you run the exact same web scenario with [WebdriverIO](/api/webdriverio), [Playwright](/api/playwright), and even [Protractor](/api/protractor)!\\n\\nNow, we\'re taking things further with [**Serenity/JS 3.2.0**](https://github.com/serenity-js/serenity-js/releases/tag/v3.2.0) introducing support for the latest and greatest **WebdriverIO 8**! \ud83e\udd73 \\n\\nCheck out our new tutorial where in **less than 5 minutes**, you\'ll learn how to **integrate Serenity/JS** with your WebdriverIO test suite, **enable Serenity BDD reports**, and start using the **Screenplay Pattern**!\\n\\nLearn about [Using Serenity/JS with WebdriverIO](/handbook/test-runners/webdriverio/)!"},{"id":"test-automation-summit-berlin","metadata":{"permalink":"/blog/test-automation-summit-berlin","editUrl":"https://github.com/serenity-js/serenity-js.org/tree/main/src/blog/2022-08-29-test-automation-summit-berlin/index.md","source":"@site/src/blog/2022-08-29-test-automation-summit-berlin/index.md","title":"Test Automation Summit, Berlin 2022","description":"Test Automation Summit, Berlin 2022","date":"2022-08-29T00:00:00.000Z","tags":[{"inline":true,"label":"conference","permalink":"/blog/tags/conference"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"}],"readingTime":4.25,"hasTruncateMarker":true,"authors":[{"name":"Jan Molak","url":"https://github.com/jan-molak","imageURL":"https://github.com/jan-molak.png","key":"jan-molak","page":null}],"frontMatter":{"slug":"test-automation-summit-berlin","title":"Test Automation Summit, Berlin 2022","authors":["jan-molak"],"tags":["conference","open-source"]},"unlisted":false,"prevItem":{"title":"Support for WebdriverIO 8","permalink":"/blog/support-for-webdriverio-8"}},"content":"![Test Automation Summit, Berlin 2022](tas-berlin.png)\\n\\nWhen Titus Fortner ([@titusfortner](https://twitter.com/titusfortner)), the maintainer of [Watir](https://www.selenium.dev/blog/2022/test-automation-summit/) and a contributor to [Selenium](https://www.selenium.dev/), messaged me on Twitter two months ago, I knew something interesting was coming.\\n\\nTitus and I never met in person. In fact, I have never met most of the other open-source maintainers I\'ve worked with over the last ten years since I became an open-source maintainer myself and the last six years I spent working on [Serenity/JS](https://serenity-js.org).\\n\\nThis is not that surprising, to be fair. After all, have you ever met any of the people maintaining the open-source libraries and frameworks that _your work_ depends on?\\n\\nWell, in my case, this was about to change.\\n\\n\x3c!--truncate--\x3e\\n\\nWhat Titus had in mind was what became the very first [Test Automation Summit](https://www.selenium.dev/blog/2022/test-automation-summit/) - a way to help the maintainers of all the various free open-source projects facilitating web-based testing to connect better and collaborate more effectively.\\n\\nAs you might have expected, as soon as I heard _test automation_, _collaboration_ and _open source_ all in one sentence, I immediately said \\"yes!\\" \\n\\nIt wasn\'t going to be yet another Zoom call or a meetup at the local pub.\\nNo. On the contrary, what Titus envisioned was a number of working sessions over the course of several days where the open-source maintainers and representatives of the development teams behind the major web browsers look into answering several important questions:\\n- **How can we make it easier for developers to get into test automation**, and more importantly - **how can we help them do it well?** Test automation is a complex and ever-evolving domain and, let\'s face it, not the primary focus of most developers trying to get their product features shipped under tight deadlines. Even worse, there is plenty of poor advice on the Internet and many companies selling [snake oil](https://en.wikipedia.org/wiki/Snake_oil) and commercial tools that promote bad practices.\\n- **How can we make it easier for open-source projects to onboard contributors and maintainers?** Maintaining free open-source software is _much_ more work than most developers imagine and typically requires **10-40 hours per week per maintainer** **_on top_** of our regular day jobs. To put things in perspective, there are [**83 million developers**](https://en.wikipedia.org/wiki/GitHub) registered on GitHub, and **less than 100 core maintainers** who support the major test automation tools most of us rely on every day to get our work done. And I didn\'t miss a zero or few there, I\'m afraid, **less than one hundred**.\\n- So given the limited resources, **how can we be more effective as a test automation community?** Many open-source automation tools provide similar or overlapping features, and the documentation we provide to the users is vast and often challenging for newcomers to navigate. Those issues often confuse the users trying to pick the \\"right tool for the job\\". They also make beginners gravitate towards the \\"batteries included\\" commercial tools, which are technologically inferior and typically result in increased maintenance costs but tend to offer a better user experience, polished marketing, and require fewer choices and less experience.  \\n- And lastly, **what can the browsers do to make testing web applications easier?** Over the last decade, web applications have become increasingly complex and steadily replaced the more traditional desktop-based applications. web browsers have also become more sophisticated than ever, and it\'s often easier to think of them as _operating systems_ than just something that \\"renders a page\\". Even though all popular browsers nowadays provide drivers supporting the [WebDriver protocol](https://www.w3.org/TR/webdriver2/), Chromium-based browsers also support the [Chrome DevTools protocol](https://chromedevtools.github.io/devtools-protocol/). This new protocol offers greater browser control but is also much more chatty and impractical when used with remote test grids (which you\'d use for cross-browser and native mobile testing). So how can we have both **greater control** _and_ **greater versatility**?\\n\\nApart from trying to find answers to those questions, we also had an opportunity to present the open-source projects we are working on. In the many conversations we had with other maintainers, we also shared the challenges we face and the ways we have found to overcome them.\\n\\nThose challenges ranged from **technical challenges** of running a software project: How do you keep dependencies up to date? What security checks do you have in place? How do you protect your users from breaking changes? What\'s your PR process like? \\n\\nThrough **legal challenges**: How do you protect your intellectual property and brand? How do you protect the rights of your contributors? How do you keep your community safe and inclusive? \\n\\nAll the way to **challenges with funding**: How do you fund your project? How do you find sponsors? How do you make your project sustainable? Is selling your work to one of the \\"big players\\" the only way to go?\\n\\nOver those couple of days in Berlin, I had the great pleasure of learning from and exchanging ideas with the leaders of some of the most successful free open-source test automation projects.\\n\\nWatch this space \ud83d\ude0e\\n\\nJan\\n\\n![Test Automation Summit, Berlin 2022, Maintainers](tas-berlin-maintainers.jpeg)\\n\\n_Huge thanks to the [Software Freedom Conservancy](https://sfconservancy.org/) for sponsoring my travel to the event and to [SauceLabs](https://saucelabs.com/) for sponsoring the office space in Berlin!_"}]}}')}}]);